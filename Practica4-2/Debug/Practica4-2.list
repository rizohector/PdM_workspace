
Practica4-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003354  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003704  08003704  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800370c  0800370c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000000b8  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e663  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002302  00000000  00000000  0002e713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  00030a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  00031280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003dfc  00000000  00000000  00031a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dada  00000000  00000000  000357fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e358d  00000000  00000000  000432d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00126863  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002734  00000000  00000000  001268b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080034ec 	.word	0x080034ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080034ec 	.word	0x080034ec

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <debounceInit>:

#define DELAY_TIME 40 //macro con el tiempo de delay

//bool_t debounceInit(void) //función de inicialización
void debounceInit(void)
               {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
                debounceState=BUTTON_UP;//carga valor incicial, la MEF inicial con el boton sin presionar
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <debounceInit+0x30>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
                BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);//inicialización del botón
 80005a2:	2100      	movs	r1, #0
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 faed 	bl	8000b84 <BSP_PB_Init>
                delayInit(&delay, DELAY_TIME);//inicializa delay con el tiempo del delay
 80005aa:	2128      	movs	r1, #40	; 0x28
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <debounceInit+0x34>)
 80005ae:	f000 f882 	bl	80006b6 <delayInit>

                BSP_LED_Init(LED1);//se inicializa los LEDs
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 fa7c 	bl	8000ab0 <BSP_LED_Init>
                BSP_LED_Init(LED2);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 fa79 	bl	8000ab0 <BSP_LED_Init>
                BSP_LED_Init(LED3);
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 fa76 	bl	8000ab0 <BSP_LED_Init>
                //return true;
               }
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000009c 	.word	0x2000009c
 80005cc:	200000a0 	.word	0x200000a0

080005d0 <debounceUpdate>:

void debounceUpdate(void)//función de actualización
        {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	     switch (debounceState)
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <debounceUpdate+0xc4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d858      	bhi.n	800068e <debounceUpdate+0xbe>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <debounceUpdate+0x14>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	080005f5 	.word	0x080005f5
 80005e8:	08000655 	.word	0x08000655
 80005ec:	0800063b 	.word	0x0800063b
 80005f0:	0800060f 	.word	0x0800060f
	           {
	            case BUTTON_UP:
	            	if (BSP_PB_GetState(BUTTON_USER))//si se presiona el botón entrega un boleano 1
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fb1b 	bl	8000c30 <BSP_PB_GetState>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d03f      	beq.n	8000680 <debounceUpdate+0xb0>
	            	{
	            		delayRead(&delay);//aquí el delay no esta corriendo, esta apagado, se toma solo la marca del tiempo y comienza a marcar el tiempo, por eso no se fija si expiró o no,
 8000600:	4825      	ldr	r0, [pc, #148]	; (8000698 <debounceUpdate+0xc8>)
 8000602:	f000 f872 	bl	80006ea <delayRead>
	            		debounceState=BUTTON_FALLING;//cambio el estado de la MEF a falling
 8000606:	4b23      	ldr	r3, [pc, #140]	; (8000694 <debounceUpdate+0xc4>)
 8000608:	2203      	movs	r2, #3
 800060a:	701a      	strb	r2, [r3, #0]
	            	}
	            	break;
 800060c:	e038      	b.n	8000680 <debounceUpdate+0xb0>

	            case BUTTON_FALLING: //la siguiente vez que ingrese esta el estado en falling
	            if (delayRead(&delay))//pregunta si el delay (tiempo) expiró, sino expiró sale
 800060e:	4822      	ldr	r0, [pc, #136]	; (8000698 <debounceUpdate+0xc8>)
 8000610:	f000 f86b 	bl	80006ea <delayRead>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d034      	beq.n	8000684 <debounceUpdate+0xb4>
	                {
	            	 if (BSP_PB_GetState(BUTTON_USER))//cuando el tiempo expira, se lee el pulsador
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fb08 	bl	8000c30 <BSP_PB_GetState>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d005      	beq.n	8000632 <debounceUpdate+0x62>
	            	 {
	            		 buttonPressed();//si está presionado, se llama a la función de flanco descendente
 8000626:	f000 f839 	bl	800069c <buttonPressed>
	            		 debounceState=BUTTON_DOWN;//se cambia el estado a down
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <debounceUpdate+0xc4>)
 800062c:	2202      	movs	r2, #2
 800062e:	701a      	strb	r2, [r3, #0]
	            	 }
	            	 else {
	            		   debounceState=BUTTON_UP;//sino estaba presionado, descartamos la pulsación del botón
	            	      }
	                }
                 break;
 8000630:	e028      	b.n	8000684 <debounceUpdate+0xb4>
	            		   debounceState=BUTTON_UP;//sino estaba presionado, descartamos la pulsación del botón
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <debounceUpdate+0xc4>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
                 break;
 8000638:	e024      	b.n	8000684 <debounceUpdate+0xb4>

	            case BUTTON_DOWN:
	            	if (!BSP_PB_GetState(BUTTON_USER))
 800063a:	2000      	movs	r0, #0
 800063c:	f000 faf8 	bl	8000c30 <BSP_PB_GetState>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d120      	bne.n	8000688 <debounceUpdate+0xb8>
	            	{
	            	 	delayRead(&delay);
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <debounceUpdate+0xc8>)
 8000648:	f000 f84f 	bl	80006ea <delayRead>
	            	 	debounceState=BUTTON_RAISING;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <debounceUpdate+0xc4>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
	            	}
	            	break;
 8000652:	e019      	b.n	8000688 <debounceUpdate+0xb8>

	            	//break;

	            case BUTTON_RAISING:
	            	if(delayRead(&delay))
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <debounceUpdate+0xc8>)
 8000656:	f000 f848 	bl	80006ea <delayRead>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d015      	beq.n	800068c <debounceUpdate+0xbc>
	            	{
	            	  if(!BSP_PB_GetState(BUTTON_USER))
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fae5 	bl	8000c30 <BSP_PB_GetState>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d105      	bne.n	8000678 <debounceUpdate+0xa8>
	            	  {
	            		buttonReleased();
 800066c:	f000 f81d 	bl	80006aa <buttonReleased>
	            		debounceState=BUTTON_UP;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <debounceUpdate+0xc4>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	            	  }
	            	  else {debounceState=BUTTON_DOWN;}

	            	}
	            break;
 8000676:	e009      	b.n	800068c <debounceUpdate+0xbc>
	            	  else {debounceState=BUTTON_DOWN;}
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <debounceUpdate+0xc4>)
 800067a:	2202      	movs	r2, #2
 800067c:	701a      	strb	r2, [r3, #0]
	            break;
 800067e:	e005      	b.n	800068c <debounceUpdate+0xbc>
	            	break;
 8000680:	bf00      	nop
 8000682:	e004      	b.n	800068e <debounceUpdate+0xbe>
                 break;
 8000684:	bf00      	nop
 8000686:	e002      	b.n	800068e <debounceUpdate+0xbe>
	            	break;
 8000688:	bf00      	nop
 800068a:	e000      	b.n	800068e <debounceUpdate+0xbe>
	            break;
 800068c:	bf00      	nop
	           }
        }
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000009c 	.word	0x2000009c
 8000698:	200000a0 	.word	0x200000a0

0800069c <buttonPressed>:

void buttonPressed(void)//boton cuando se presiona, flanco descendente
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	//BSP_LED_Toggle(LED1);
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <buttonReleased>:

void buttonReleased(void)//boton cuando se suelta, flanco ascendente
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
	blinkyInit();
 80006ae:	f000 f997 	bl	80009e0 <blinkyInit>
	//BSP_LED_Toggle(LED2);
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <delayInit>:
#include "API_delay.h"
#include "stm32f4xx_hal.h"


void delayInit( delay_t * delay, tick_t duration )
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]

if( delay == 0 || duration < 0 || duration > MAX_DELAY)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d004      	beq.n	80006d0 <delayInit+0x1a>
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d900      	bls.n	80006d2 <delayInit+0x1c>
   while(1);//adecuado para manejo de errores. proper error handling
 80006d0:	e7fe      	b.n	80006d0 <delayInit+0x1a>
//de este while no sale nunca, se debe colocar un cartel de error
//se colgo el micro
   delay->duration  = duration;//cargo la duración
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	605a      	str	r2, [r3, #4]
   delay->running=0;//pongo el flag de running en cero
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	721a      	strb	r2, [r3, #8]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <delayRead>:

bool_t delayRead(delay_t * delay)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b084      	sub	sp, #16
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
bool_t timeArrived = false;//variable local que comeinza en false
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]

if(delay == 0)//se verifica que el puntero sea valido
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d100      	bne.n	80006fe <delayRead+0x14>
	while(1);
 80006fc:	e7fe      	b.n	80006fc <delayRead+0x12>


if (!delay->running)//si el flag esta en false significa que es la primera vez que se carga el timer
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7a1b      	ldrb	r3, [r3, #8]
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d008      	beq.n	800071e <delayRead+0x34>
{
delay->startTime = HAL_GetTick();//cargamos en startime la cuenta del tick en ese momento
 800070c:	f000 fc0e 	bl	8000f2c <HAL_GetTick>
 8000710:	4602      	mov	r2, r0
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
delay->running=1;//ponemos el flag en 1
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2201      	movs	r2, #1
 800071a:	721a      	strb	r2, [r3, #8]
 800071c:	e00e      	b.n	800073c <delayRead+0x52>
}else// despues de la 1ra lectura
{
if((tick_t)(HAL_GetTick()-delay->startTime)>=delay->duration)//se chequea si el timer expiro o no haciendo
 800071e:	f000 fc05 	bl	8000f2c <HAL_GetTick>
 8000722:	4602      	mov	r2, r0
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	1ad2      	subs	r2, r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	429a      	cmp	r2, r3
 8000730:	d304      	bcc.n	800073c <delayRead+0x52>
	//timepo actual - tiempo inicial si es >= que duración, si se cumple, el tiempo se cumplió
{
timeArrived=true;
 8000732:	2301      	movs	r3, #1
 8000734:	73fb      	strb	r3, [r7, #15]
delay->running=0;//el flag en 0 cortando el timer
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	721a      	strb	r2, [r3, #8]
//return true; podria ser
}
}
//return false podria ser pero al tener 2 puntos de salidas, se puede crear confusión al ser fidicil seguir el codigo
return timeArrived;//se devuelve el valor de timearrived
 800073c:	7bfb      	ldrb	r3, [r7, #15]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <uartInit>:
#include <stdbool.h>
#include "stm32f4xx_hal_msp.c"


void uartInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	 HAL_Init();
 800074c:	f000 fb8e 	bl	8000e6c <HAL_Init>

	  /* Configure the system clock to 180 MHz */
	  SystemClock_Config();
 8000750:	f000 f8e4 	bl	800091c <SystemClock_Config>
	  //BSP_LED_Init(LED2);

	  UartHandle.Instance        = USARTx;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <uartInit+0x68>)
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <uartInit+0x6c>)
 8000758:	601a      	str	r2, [r3, #0]
	  UartHandle.Init.BaudRate   = 9600;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <uartInit+0x68>)
 800075c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000760:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <uartInit+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <uartInit+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <uartInit+0x68>)
 8000770:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000774:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <uartInit+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <uartInit+0x68>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <uartInit+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]


	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <uartInit+0x68>)
 800078a:	f001 fbaf 	bl	8001eec <HAL_UART_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <uartInit+0x50>
	   {
	     // Initialization Error
		  	     Error_Handler();
 8000794:	f000 f8be 	bl	8000914 <Error_Handler>
	   }

	  printf("\n\r INICIAMOS UART \n\r");
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <uartInit+0x70>)
 800079a:	f001 ff51 	bl	8002640 <iprintf>

	  printf("\n\r Configuracion 1; Baud Rate  %u \n\r",UartHandle.Init.BaudRate);
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <uartInit+0x68>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <uartInit+0x74>)
 80007a6:	f001 ff4b 	bl	8002640 <iprintf>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000e0 	.word	0x200000e0
 80007b4:	40004800 	.word	0x40004800
 80007b8:	08003504 	.word	0x08003504
 80007bc:	0800351c 	.word	0x0800351c

080007c0 <uartSendString>:



void uartSendString (uint8_t fMen)
{
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b09e      	sub	sp, #120	; 0x78
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
	char string1[]="Los 3 LEDs parpadéan a 500 mseg.\n\r";
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <uartSendString+0xa0>)
 80007cc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80007d0:	461d      	mov	r5, r3
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007da:	682b      	ldr	r3, [r5, #0]
 80007dc:	6023      	str	r3, [r4, #0]
	char string2[]="Los LEDs parpadean, uno a 100 mseg, otro a 500 mseg y el último a 1 seg.\n\r";
 80007de:	4a21      	ldr	r2, [pc, #132]	; (8000864 <uartSendString+0xa4>)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4611      	mov	r1, r2
 80007e6:	224c      	movs	r2, #76	; 0x4c
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 ff13 	bl	8002614 <memcpy>
	if(fMen)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d018      	beq.n	8000826 <uartSendString+0x66>
	  {
		printf("\n\r Cantidad de caracteres %d \n\r",strlen(string1));
 80007f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fcf9 	bl	80001f0 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	4819      	ldr	r0, [pc, #100]	; (8000868 <uartSendString+0xa8>)
 8000804:	f001 ff1c 	bl	8002640 <iprintf>

		HAL_UART_Transmit(&UartHandle,(uint8_t *) string1, strlen(string1), 0xFFFF);
 8000808:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fcef 	bl	80001f0 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800081a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081e:	4813      	ldr	r0, [pc, #76]	; (800086c <uartSendString+0xac>)
 8000820:	f001 fbb1 	bl	8001f86 <HAL_UART_Transmit>

	//printf("\n\r Cantidad de caracteres %d \n\r",strlen(pString));
	     // printf("\n\r Mensaje = \n\r");
	     // HAL_UART_Transmit(&UartHandle,(uint8_t *) pString, strlen(pString), 0xFFFF);

}
 8000824:	e017      	b.n	8000856 <uartSendString+0x96>
		printf("\n\r Cantidad de caracteres %d \n\r",strlen(string2));
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fce0 	bl	80001f0 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <uartSendString+0xa8>)
 8000836:	f001 ff03 	bl	8002640 <iprintf>
		HAL_UART_Transmit(&UartHandle,(uint8_t *) string2, strlen(string2), 0xFFFF);
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fcd6 	bl	80001f0 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <uartSendString+0xac>)
 8000852:	f001 fb98 	bl	8001f86 <HAL_UART_Transmit>
}
 8000856:	bf00      	nop
 8000858:	3778      	adds	r7, #120	; 0x78
 800085a:	46bd      	mov	sp, r7
 800085c:	bdb0      	pop	{r4, r5, r7, pc}
 800085e:	bf00      	nop
 8000860:	08003564 	.word	0x08003564
 8000864:	08003588 	.word	0x08003588
 8000868:	08003544 	.word	0x08003544
 800086c:	200000e0 	.word	0x200000e0

08000870 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  //##-1- Enable peripherals and GPIO Clocks #################################
  // Enable GPIO TX/RX clock
  USARTx_TX_GPIO_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	4b23      	ldr	r3, [pc, #140]	; (800090c <HAL_UART_MspInit+0x9c>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a22      	ldr	r2, [pc, #136]	; (800090c <HAL_UART_MspInit+0x9c>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_UART_MspInit+0x9c>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_UART_MspInit+0x9c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <HAL_UART_MspInit+0x9c>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_UART_MspInit+0x9c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]


  // Enable USARTx clock
  USARTx_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x9c>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <HAL_UART_MspInit+0x9c>)
 80008ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_UART_MspInit+0x9c>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]

  //##-2- Configure peripheral GPIO ##########################################
  // UART TX GPIO pin configuration
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80008cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80008de:	2307      	movs	r3, #7
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <HAL_UART_MspInit+0xa0>)
 80008ea:	f000 fc3d 	bl	8001168 <HAL_GPIO_Init>

  // UART RX GPIO pin configuration
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80008ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80008f4:	2307      	movs	r3, #7
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <HAL_UART_MspInit+0xa0>)
 8000900:	f000 fc32 	bl	8001168 <HAL_GPIO_Init>
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020c00 	.word	0x40020c00

08000914 <Error_Handler>:
}



static void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
// Turn LED2 on
 // BSP_LED_On(LED2);
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x4>
	...

0800091c <SystemClock_Config>:
}



static void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  // Enable Power Control clock
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <SystemClock_Config+0xbc>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <SystemClock_Config+0xbc>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <SystemClock_Config+0xbc>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]

  // The voltage scaling allows optimizing the power consumption when the device is
  //   clocked below the maximum system frequency, to update the voltage scaling value
  //   regarding system frequency refer to product datasheet.
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <SystemClock_Config+0xc0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a25      	ldr	r2, [pc, #148]	; (80009dc <SystemClock_Config+0xc0>)
 8000948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <SystemClock_Config+0xc0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  // Enable HSE Oscillator and activate PLL with HSE as source
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095a:	2301      	movs	r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000962:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000968:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800096e:	2308      	movs	r3, #8
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000972:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800097c:	2307      	movs	r3, #7
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fe3d 	bl	8001604 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x78>
    {
    // Initialization Error
     Error_Handler();
 8000990:	f7ff ffc0 	bl	8000914 <Error_Handler>
    }

  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000994:	f000 fde6 	bl	8001564 <HAL_PWREx_EnableOverDrive>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x86>
    {
    /* Initialization Error */
     Error_Handler();
 800099e:	f7ff ffb9 	bl	8000914 <Error_Handler>
    }

  // Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  //   clocks dividers
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009a2:	230f      	movs	r3, #15
 80009a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009be:	2105      	movs	r1, #5
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f897 	bl	8001af4 <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xb4>
    {
    // Initialization Error
     Error_Handler();
 80009cc:	f7ff ffa2 	bl	8000914 <Error_Handler>
    }
}
 80009d0:	bf00      	nop
 80009d2:	3750      	adds	r7, #80	; 0x50
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <blinkyInit>:
static delay_t delayLed3;//son declaradas como variables globales privadas

static bool_t change=false;

void blinkyInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	//bool_t change=false;
	if(!change)
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <blinkyInit+0x74>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f083 0301 	eor.w	r3, r3, #1
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d016      	beq.n	8000a20 <blinkyInit+0x40>
	{
		delayInit(&delayLed1,LED1_DURATION);
 80009f2:	2164      	movs	r1, #100	; 0x64
 80009f4:	4818      	ldr	r0, [pc, #96]	; (8000a58 <blinkyInit+0x78>)
 80009f6:	f7ff fe5e 	bl	80006b6 <delayInit>
		delayInit(&delayLed2,LED2_DURATION);
 80009fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009fe:	4817      	ldr	r0, [pc, #92]	; (8000a5c <blinkyInit+0x7c>)
 8000a00:	f7ff fe59 	bl	80006b6 <delayInit>
		delayInit(&delayLed3,LED3_DURATION);
 8000a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a08:	4815      	ldr	r0, [pc, #84]	; (8000a60 <blinkyInit+0x80>)
 8000a0a:	f7ff fe54 	bl	80006b6 <delayInit>
		uartSendString(change);
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <blinkyInit+0x74>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fed4 	bl	80007c0 <uartSendString>
		change=true;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <blinkyInit+0x74>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
		delayInit(&delayLed2,LEDX_DURATION);
		delayInit(&delayLed3,LEDX_DURATION);
		uartSendString(change);
		change=false;
	}
}
 8000a1e:	e016      	b.n	8000a4e <blinkyInit+0x6e>
		delayInit(&delayLed1,LEDX_DURATION);
 8000a20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <blinkyInit+0x78>)
 8000a26:	f7ff fe46 	bl	80006b6 <delayInit>
		delayInit(&delayLed2,LEDX_DURATION);
 8000a2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <blinkyInit+0x7c>)
 8000a30:	f7ff fe41 	bl	80006b6 <delayInit>
		delayInit(&delayLed3,LEDX_DURATION);
 8000a34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <blinkyInit+0x80>)
 8000a3a:	f7ff fe3c 	bl	80006b6 <delayInit>
		uartSendString(change);
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <blinkyInit+0x74>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff febc 	bl	80007c0 <uartSendString>
		change=false;
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <blinkyInit+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000d0 	.word	0x200000d0
 8000a58:	200000ac 	.word	0x200000ac
 8000a5c:	200000b8 	.word	0x200000b8
 8000a60:	200000c4 	.word	0x200000c4

08000a64 <blinkyUpdate>:

void blinkyUpdate(void)
	{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
		if (delayRead(&delayLed1))BSP_LED_Toggle(LED1);
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <blinkyUpdate+0x40>)
 8000a6a:	f7ff fe3e 	bl	80006ea <delayRead>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <blinkyUpdate+0x16>
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 f86b 	bl	8000b50 <BSP_LED_Toggle>
		if (delayRead(&delayLed2))BSP_LED_Toggle(LED2);
 8000a7a:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <blinkyUpdate+0x44>)
 8000a7c:	f7ff fe35 	bl	80006ea <delayRead>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <blinkyUpdate+0x28>
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 f862 	bl	8000b50 <BSP_LED_Toggle>
		if (delayRead(&delayLed3))BSP_LED_Toggle(LED3);
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <blinkyUpdate+0x48>)
 8000a8e:	f7ff fe2c 	bl	80006ea <delayRead>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <blinkyUpdate+0x3a>
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f000 f859 	bl	8000b50 <BSP_LED_Toggle>
	}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000ac 	.word	0x200000ac
 8000aa8:	200000b8 	.word	0x200000b8
 8000aac:	200000c4 	.word	0x200000c4

08000ab0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10e      	bne.n	8000ade <BSP_LED_Init+0x2e>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <BSP_LED_Init+0x94>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <BSP_LED_Init+0x94>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <BSP_LED_Init+0x94>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	e00d      	b.n	8000afa <BSP_LED_Init+0x4a>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <BSP_LED_Init+0x94>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <BSP_LED_Init+0x94>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <BSP_LED_Init+0x94>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <BSP_LED_Init+0x98>)
 8000afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <BSP_LED_Init+0x9c>)
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	f107 0214 	add.w	r2, r7, #20
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fb22 	bl	8001168 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <BSP_LED_Init+0x9c>)
 8000b28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <BSP_LED_Init+0x98>)
 8000b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b34:	2200      	movs	r2, #0
 8000b36:	4619      	mov	r1, r3
 8000b38:	f000 fcda 	bl	80014f0 <HAL_GPIO_WritePin>
}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	0800364c 	.word	0x0800364c
 8000b4c:	20000000 	.word	0x20000000

08000b50 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <BSP_LED_Toggle+0x2c>)
 8000b5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	4906      	ldr	r1, [pc, #24]	; (8000b80 <BSP_LED_Toggle+0x30>)
 8000b66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	f000 fcd8 	bl	8001522 <HAL_GPIO_TogglePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	0800364c 	.word	0x0800364c

08000b84 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <BSP_PB_Init+0xa4>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <BSP_PB_Init+0xa4>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <BSP_PB_Init+0xa4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d112      	bne.n	8000bdc <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <BSP_PB_Init+0xa8>)
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	f107 020c 	add.w	r2, r7, #12
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fac6 	bl	8001168 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d11d      	bne.n	8000c1e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000bec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bf0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <BSP_PB_Init+0xa8>)
 8000bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfa:	f107 020c 	add.w	r2, r7, #12
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fab1 	bl	8001168 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000c06:	2328      	movs	r3, #40	; 0x28
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fa73 	bl	80010fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000c14:	2328      	movs	r3, #40	; 0x28
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fa8a 	bl	8001132 <HAL_NVIC_EnableIRQ>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	2000000c 	.word	0x2000000c

08000c30 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <BSP_PB_GetState+0x28>)
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fc39 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000000c 	.word	0x2000000c

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <SystemInit+0x60>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <SystemInit+0x60>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <SystemInit+0x64>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <SystemInit+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <SystemInit+0x64>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <SystemInit+0x64>)
 8000c88:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <SystemInit+0x64>)
 8000c94:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <SystemInit+0x68>)
 8000c96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <SystemInit+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <SystemInit+0x64>)
 8000c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SystemInit+0x60>)
 8000cac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb0:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	24003010 	.word	0x24003010

08000cc8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000d1c:	f000 f8f2 	bl	8000f04 <HAL_IncTick>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
	}

return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fbe5 	bl	8002548 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
	}
	return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f001 fbc6 	bl	80025c0 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20030000 	.word	0x20030000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200000d4 	.word	0x200000d4
 8000e68:	20000138 	.word	0x20000138

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_Init+0x34>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_Init+0x34>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x34>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x34>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f92b 	bl	80010e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f000 fb5f 	bl	8001556 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f943 	bl	800114e <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee0:	f000 f90b 	bl	80010fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000010 	.word	0x20000010
 8000efc:	20000018 	.word	0x20000018
 8000f00:	20000014 	.word	0x20000014

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000018 	.word	0x20000018
 8000f28:	20000124 	.word	0x20000124

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000124 	.word	0x20000124

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	; (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b0:	d301      	bcc.n	80010b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00f      	b.n	80010d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <SysTick_Config+0x40>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010be:	210f      	movs	r1, #15
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c4:	f7ff ff8e 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <SysTick_Config+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <SysTick_Config+0x40>)
 80010d0:	2207      	movs	r2, #7
 80010d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	e000e010 	.word	0xe000e010

080010e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff29 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110c:	f7ff ff3e 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f7ff ff8e 	bl	8001038 <NVIC_EncodePriority>
 800111c:	4602      	mov	r2, r0
 800111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <__NVIC_SetPriority>
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff31 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffa2 	bl	80010a0 <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e177      	b.n	8001474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8166 	bne.w	800146e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80c0 	beq.w	800146e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_GPIO_Init+0x324>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a65      	ldr	r2, [pc, #404]	; (800148c <HAL_GPIO_Init+0x324>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b63      	ldr	r3, [pc, #396]	; (800148c <HAL_GPIO_Init+0x324>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a61      	ldr	r2, [pc, #388]	; (8001490 <HAL_GPIO_Init+0x328>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a58      	ldr	r2, [pc, #352]	; (8001494 <HAL_GPIO_Init+0x32c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d037      	beq.n	80013a6 <HAL_GPIO_Init+0x23e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a57      	ldr	r2, [pc, #348]	; (8001498 <HAL_GPIO_Init+0x330>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d031      	beq.n	80013a2 <HAL_GPIO_Init+0x23a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a56      	ldr	r2, [pc, #344]	; (800149c <HAL_GPIO_Init+0x334>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x236>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a55      	ldr	r2, [pc, #340]	; (80014a0 <HAL_GPIO_Init+0x338>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x232>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a54      	ldr	r2, [pc, #336]	; (80014a4 <HAL_GPIO_Init+0x33c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x22e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a53      	ldr	r2, [pc, #332]	; (80014a8 <HAL_GPIO_Init+0x340>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x22a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_GPIO_Init+0x344>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a51      	ldr	r2, [pc, #324]	; (80014b0 <HAL_GPIO_Init+0x348>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a50      	ldr	r2, [pc, #320]	; (80014b4 <HAL_GPIO_Init+0x34c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4f      	ldr	r2, [pc, #316]	; (80014b8 <HAL_GPIO_Init+0x350>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x21a>
 800137e:	2309      	movs	r3, #9
 8001380:	e012      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001382:	230a      	movs	r3, #10
 8001384:	e010      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001386:	2308      	movs	r3, #8
 8001388:	e00e      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138a:	2307      	movs	r3, #7
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138e:	2306      	movs	r3, #6
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b8:	4935      	ldr	r1, [pc, #212]	; (8001490 <HAL_GPIO_Init+0x328>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HAL_GPIO_Init+0x354>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ea:	4a34      	ldr	r2, [pc, #208]	; (80014bc <HAL_GPIO_Init+0x354>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f0:	4b32      	ldr	r3, [pc, #200]	; (80014bc <HAL_GPIO_Init+0x354>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001414:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_GPIO_Init+0x354>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <HAL_GPIO_Init+0x354>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_GPIO_Init+0x354>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_GPIO_Init+0x354>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_GPIO_Init+0x354>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae84 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40021c00 	.word	0x40021c00
 80014b4:	40022000 	.word	0x40022000
 80014b8:	40022400 	.word	0x40022400
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	041a      	lsls	r2, r3, #16
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43d9      	mvns	r1, r3
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	400b      	ands	r3, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001590:	f7ff fccc 	bl	8000f2c <HAL_GetTick>
 8001594:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001596:	e009      	b.n	80015ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001598:	f7ff fcc8 	bl	8000f2c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a6:	d901      	bls.n	80015ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e01f      	b.n	80015ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_PWREx_EnableOverDrive+0x98>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d1ee      	bne.n	8001598 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c0:	f7ff fcb4 	bl	8000f2c <HAL_GetTick>
 80015c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015c6:	e009      	b.n	80015dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015c8:	f7ff fcb0 	bl	8000f2c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015d6:	d901      	bls.n	80015dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e007      	b.n	80015ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_PWREx_EnableOverDrive+0x98>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015e8:	d1ee      	bne.n	80015c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	420e0040 	.word	0x420e0040
 80015fc:	40007000 	.word	0x40007000
 8001600:	420e0044 	.word	0x420e0044

08001604 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e264      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d075      	beq.n	800170e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001622:	4ba3      	ldr	r3, [pc, #652]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b04      	cmp	r3, #4
 800162c:	d00c      	beq.n	8001648 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162e:	4ba0      	ldr	r3, [pc, #640]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001636:	2b08      	cmp	r3, #8
 8001638:	d112      	bne.n	8001660 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163a:	4b9d      	ldr	r3, [pc, #628]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001646:	d10b      	bne.n	8001660 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d05b      	beq.n	800170c <HAL_RCC_OscConfig+0x108>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d157      	bne.n	800170c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e23f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x74>
 800166a:	4b91      	ldr	r3, [pc, #580]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a90      	ldr	r2, [pc, #576]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xb0>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x98>
 8001682:	4b8b      	ldr	r3, [pc, #556]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a8a      	ldr	r2, [pc, #552]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b88      	ldr	r3, [pc, #544]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a87      	ldr	r2, [pc, #540]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xb0>
 800169c:	4b84      	ldr	r3, [pc, #528]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a83      	ldr	r2, [pc, #524]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a80      	ldr	r2, [pc, #512]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc36 	bl	8000f2c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fc32 	bl	8000f2c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e204      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xc0>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc22 	bl	8000f2c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fc1e 	bl	8000f2c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1f0      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	4b6c      	ldr	r3, [pc, #432]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0xe8>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001726:	4b62      	ldr	r3, [pc, #392]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172e:	2b08      	cmp	r3, #8
 8001730:	d11c      	bne.n	800176c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d116      	bne.n	800176c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x152>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1c4      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4952      	ldr	r1, [pc, #328]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	e03a      	b.n	80017e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001774:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <HAL_RCC_OscConfig+0x2b0>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fbd7 	bl	8000f2c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fbd3 	bl	8000f2c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e1a5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4940      	ldr	r1, [pc, #256]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b6:	4b3f      	ldr	r3, [pc, #252]	; (80018b4 <HAL_RCC_OscConfig+0x2b0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fbb6 	bl	8000f2c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c4:	f7ff fbb2 	bl	8000f2c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e184      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d030      	beq.n	8001850 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d016      	beq.n	8001824 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <HAL_RCC_OscConfig+0x2b4>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fb96 	bl	8000f2c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff fb92 	bl	8000f2c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e164      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x200>
 8001822:	e015      	b.n	8001850 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_OscConfig+0x2b4>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff fb7f 	bl	8000f2c <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff fb7b 	bl	8000f2c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e14d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a0 	beq.w	800199e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x2b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d121      	bne.n	80018de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_RCC_OscConfig+0x2b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_RCC_OscConfig+0x2b8>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb41 	bl	8000f2c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	e011      	b.n	80018d2 <HAL_RCC_OscConfig+0x2ce>
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	42470000 	.word	0x42470000
 80018b8:	42470e80 	.word	0x42470e80
 80018bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff fb34 	bl	8000f2c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e106      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b85      	ldr	r3, [pc, #532]	; (8001ae8 <HAL_RCC_OscConfig+0x4e4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2f0>
 80018e6:	4b81      	ldr	r3, [pc, #516]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a80      	ldr	r2, [pc, #512]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
 80018f2:	e01c      	b.n	800192e <HAL_RCC_OscConfig+0x32a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x312>
 80018fc:	4b7b      	ldr	r3, [pc, #492]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a7a      	ldr	r2, [pc, #488]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	4b78      	ldr	r3, [pc, #480]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a77      	ldr	r2, [pc, #476]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
 8001914:	e00b      	b.n	800192e <HAL_RCC_OscConfig+0x32a>
 8001916:	4b75      	ldr	r3, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	4a74      	ldr	r2, [pc, #464]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
 8001922:	4b72      	ldr	r3, [pc, #456]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a71      	ldr	r2, [pc, #452]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d015      	beq.n	8001962 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001936:	f7ff faf9 	bl	8000f2c <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff faf5 	bl	8000f2c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0c5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	4b65      	ldr	r3, [pc, #404]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ee      	beq.n	800193e <HAL_RCC_OscConfig+0x33a>
 8001960:	e014      	b.n	800198c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7ff fae3 	bl	8000f2c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7ff fadf 	bl	8000f2c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0af      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001992:	4b56      	ldr	r3, [pc, #344]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a55      	ldr	r2, [pc, #340]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 809b 	beq.w	8001ade <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d05c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d141      	bne.n	8001a40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCC_OscConfig+0x4ec>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fab3 	bl	8000f2c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff faaf 	bl	8000f2c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e081      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019dc:	4b43      	ldr	r3, [pc, #268]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	019b      	lsls	r3, r3, #6
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	061b      	lsls	r3, r3, #24
 8001a0c:	4937      	ldr	r1, [pc, #220]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a12:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_RCC_OscConfig+0x4ec>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fa88 	bl	8000f2c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff fa84 	bl	8000f2c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e056      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x41c>
 8001a3e:	e04e      	b.n	8001ade <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_RCC_OscConfig+0x4ec>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff fa71 	bl	8000f2c <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff fa6d 	bl	8000f2c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e03f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x44a>
 8001a6c:	e037      	b.n	8001ade <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e032      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d028      	beq.n	8001ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d121      	bne.n	8001ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11a      	bne.n	8001ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aaa:	4013      	ands	r3, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ab0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d111      	bne.n	8001ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	42470060 	.word	0x42470060

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0cc      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d90c      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b65      	ldr	r3, [pc, #404]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0b8      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b48:	4b59      	ldr	r3, [pc, #356]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a58      	ldr	r2, [pc, #352]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b60:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	494d      	ldr	r1, [pc, #308]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d044      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d119      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e07f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e06f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e067      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4934      	ldr	r1, [pc, #208]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7ff f9a2 	bl	8000f2c <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff f99e 	bl	8000f2c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e04f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d20c      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e032      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4916      	ldr	r1, [pc, #88]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c7a:	f000 f821 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	490a      	ldr	r1, [pc, #40]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	5ccb      	ldrb	r3, [r1, r3]
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f902 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	08003654 	.word	0x08003654
 8001cb8:	20000010 	.word	0x20000010
 8001cbc:	20000014 	.word	0x20000014

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd8:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d00d      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	f200 80bd 	bhi.w	8001e64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001cf2:	e0b7      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cf4:	4b61      	ldr	r3, [pc, #388]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cf6:	60bb      	str	r3, [r7, #8]
       break;
 8001cf8:	e0b7      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001cfc:	60bb      	str	r3, [r7, #8]
      break;
 8001cfe:	e0b4      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d00:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d0a:	4b5b      	ldr	r3, [pc, #364]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d04d      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	ea02 0800 	and.w	r8, r2, r0
 8001d2e:	ea03 0901 	and.w	r9, r3, r1
 8001d32:	4640      	mov	r0, r8
 8001d34:	4649      	mov	r1, r9
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	014b      	lsls	r3, r1, #5
 8001d40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d44:	0142      	lsls	r2, r0, #5
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	ebb0 0008 	subs.w	r0, r0, r8
 8001d4e:	eb61 0109 	sbc.w	r1, r1, r9
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	018b      	lsls	r3, r1, #6
 8001d5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d60:	0182      	lsls	r2, r0, #6
 8001d62:	1a12      	subs	r2, r2, r0
 8001d64:	eb63 0301 	sbc.w	r3, r3, r1
 8001d68:	f04f 0000 	mov.w	r0, #0
 8001d6c:	f04f 0100 	mov.w	r1, #0
 8001d70:	00d9      	lsls	r1, r3, #3
 8001d72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d76:	00d0      	lsls	r0, r2, #3
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	eb12 0208 	adds.w	r2, r2, r8
 8001d80:	eb43 0309 	adc.w	r3, r3, r9
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	f04f 0100 	mov.w	r1, #0
 8001d8c:	0259      	lsls	r1, r3, #9
 8001d8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d92:	0250      	lsls	r0, r2, #9
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	f7fe fa7c 	bl	80002a0 <__aeabi_uldivmod>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4613      	mov	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	e04a      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	461a      	mov	r2, r3
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dc2:	f04f 0100 	mov.w	r1, #0
 8001dc6:	ea02 0400 	and.w	r4, r2, r0
 8001dca:	ea03 0501 	and.w	r5, r3, r1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	014b      	lsls	r3, r1, #5
 8001ddc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001de0:	0142      	lsls	r2, r0, #5
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	1b00      	subs	r0, r0, r4
 8001de8:	eb61 0105 	sbc.w	r1, r1, r5
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	018b      	lsls	r3, r1, #6
 8001df6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dfa:	0182      	lsls	r2, r0, #6
 8001dfc:	1a12      	subs	r2, r2, r0
 8001dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001e02:	f04f 0000 	mov.w	r0, #0
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	00d9      	lsls	r1, r3, #3
 8001e0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e10:	00d0      	lsls	r0, r2, #3
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	1912      	adds	r2, r2, r4
 8001e18:	eb45 0303 	adc.w	r3, r5, r3
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	0299      	lsls	r1, r3, #10
 8001e26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e2a:	0290      	lsls	r0, r2, #10
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	461a      	mov	r2, r3
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	f7fe fa30 	bl	80002a0 <__aeabi_uldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4613      	mov	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	3301      	adds	r3, #1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	60bb      	str	r3, [r7, #8]
      break;
 8001e62:	e002      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e66:	60bb      	str	r3, [r7, #8]
      break;
 8001e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	007a1200 	.word	0x007a1200

08001e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000010 	.word	0x20000010

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ea0:	f7ff fff0 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0a9b      	lsrs	r3, r3, #10
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	08003664 	.word	0x08003664

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ec8:	f7ff ffdc 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0b5b      	lsrs	r3, r3, #13
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08003664 	.word	0x08003664

08001eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e03f      	b.n	8001f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fcac 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2224      	movs	r2, #36	; 0x24
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f929 	bl	8002188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695a      	ldr	r2, [r3, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b08a      	sub	sp, #40	; 0x28
 8001f8a:	af02      	add	r7, sp, #8
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d17c      	bne.n	80020a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_UART_Transmit+0x2c>
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e075      	b.n	80020a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_UART_Transmit+0x3e>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e06e      	b.n	80020a2 <HAL_UART_Transmit+0x11c>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2221      	movs	r2, #33	; 0x21
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fda:	f7fe ffa7 	bl	8000f2c <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	88fa      	ldrh	r2, [r7, #6]
 8001fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff4:	d108      	bne.n	8002008 <HAL_UART_Transmit+0x82>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d104      	bne.n	8002008 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	e003      	b.n	8002010 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002018:	e02a      	b.n	8002070 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2200      	movs	r2, #0
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f840 	bl	80020aa <UART_WaitOnFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e036      	b.n	80020a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10b      	bne.n	8002052 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	3302      	adds	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	e007      	b.n	8002062 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3301      	adds	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1cf      	bne.n	800201a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2200      	movs	r2, #0
 8002082:	2140      	movs	r1, #64	; 0x40
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f810 	bl	80020aa <UART_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e006      	b.n	80020a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	e000      	b.n	80020a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
  }
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b090      	sub	sp, #64	; 0x40
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4613      	mov	r3, r2
 80020b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ba:	e050      	b.n	800215e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020c2:	d04c      	beq.n	800215e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <UART_WaitOnFlagUntilTimeout+0x30>
 80020ca:	f7fe ff2f 	bl	8000f2c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d241      	bcs.n	800215e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	330c      	adds	r3, #12
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	e853 3f00 	ldrex	r3, [r3]
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	330c      	adds	r3, #12
 80020f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fa:	637a      	str	r2, [r7, #52]	; 0x34
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002102:	e841 2300 	strex	r3, r2, [r1]
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e5      	bne.n	80020da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3314      	adds	r3, #20
 8002114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	e853 3f00 	ldrex	r3, [r3]
 800211c:	613b      	str	r3, [r7, #16]
   return(result);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3314      	adds	r3, #20
 800212c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800212e:	623a      	str	r2, [r7, #32]
 8002130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002132:	69f9      	ldr	r1, [r7, #28]
 8002134:	6a3a      	ldr	r2, [r7, #32]
 8002136:	e841 2300 	strex	r3, r2, [r1]
 800213a:	61bb      	str	r3, [r7, #24]
   return(result);
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1e5      	bne.n	800210e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e00f      	b.n	800217e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4013      	ands	r3, r2
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	429a      	cmp	r2, r3
 800217a:	d09f      	beq.n	80020bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3740      	adds	r7, #64	; 0x40
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800218c:	b09f      	sub	sp, #124	; 0x7c
 800218e:	af00      	add	r7, sp, #0
 8002190:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800219c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219e:	68d9      	ldr	r1, [r3, #12]
 80021a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	ea40 0301 	orr.w	r3, r0, r1
 80021a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4313      	orrs	r3, r2
 80021c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80021c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021cc:	f021 010c 	bic.w	r1, r1, #12
 80021d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d6:	430b      	orrs	r3, r1
 80021d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e6:	6999      	ldr	r1, [r3, #24]
 80021e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	ea40 0301 	orr.w	r3, r0, r1
 80021f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4bc5      	ldr	r3, [pc, #788]	; (800250c <UART_SetConfig+0x384>)
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d004      	beq.n	8002206 <UART_SetConfig+0x7e>
 80021fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4bc3      	ldr	r3, [pc, #780]	; (8002510 <UART_SetConfig+0x388>)
 8002202:	429a      	cmp	r2, r3
 8002204:	d103      	bne.n	800220e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002206:	f7ff fe5d 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 800220a:	6778      	str	r0, [r7, #116]	; 0x74
 800220c:	e002      	b.n	8002214 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800220e:	f7ff fe45 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002212:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800221c:	f040 80b6 	bne.w	800238c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002222:	461c      	mov	r4, r3
 8002224:	f04f 0500 	mov.w	r5, #0
 8002228:	4622      	mov	r2, r4
 800222a:	462b      	mov	r3, r5
 800222c:	1891      	adds	r1, r2, r2
 800222e:	6439      	str	r1, [r7, #64]	; 0x40
 8002230:	415b      	adcs	r3, r3
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
 8002234:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002238:	1912      	adds	r2, r2, r4
 800223a:	eb45 0303 	adc.w	r3, r5, r3
 800223e:	f04f 0000 	mov.w	r0, #0
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	00d9      	lsls	r1, r3, #3
 8002248:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800224c:	00d0      	lsls	r0, r2, #3
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	1911      	adds	r1, r2, r4
 8002254:	6639      	str	r1, [r7, #96]	; 0x60
 8002256:	416b      	adcs	r3, r5
 8002258:	667b      	str	r3, [r7, #100]	; 0x64
 800225a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	461a      	mov	r2, r3
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	1891      	adds	r1, r2, r2
 8002266:	63b9      	str	r1, [r7, #56]	; 0x38
 8002268:	415b      	adcs	r3, r3
 800226a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800226c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002270:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002274:	f7fe f814 	bl	80002a0 <__aeabi_uldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4ba5      	ldr	r3, [pc, #660]	; (8002514 <UART_SetConfig+0x38c>)
 800227e:	fba3 2302 	umull	r2, r3, r3, r2
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	011e      	lsls	r6, r3, #4
 8002286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002288:	461c      	mov	r4, r3
 800228a:	f04f 0500 	mov.w	r5, #0
 800228e:	4622      	mov	r2, r4
 8002290:	462b      	mov	r3, r5
 8002292:	1891      	adds	r1, r2, r2
 8002294:	6339      	str	r1, [r7, #48]	; 0x30
 8002296:	415b      	adcs	r3, r3
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800229e:	1912      	adds	r2, r2, r4
 80022a0:	eb45 0303 	adc.w	r3, r5, r3
 80022a4:	f04f 0000 	mov.w	r0, #0
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	00d9      	lsls	r1, r3, #3
 80022ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022b2:	00d0      	lsls	r0, r2, #3
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	1911      	adds	r1, r2, r4
 80022ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80022bc:	416b      	adcs	r3, r5
 80022be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	1891      	adds	r1, r2, r2
 80022cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80022ce:	415b      	adcs	r3, r3
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80022da:	f7fd ffe1 	bl	80002a0 <__aeabi_uldivmod>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <UART_SetConfig+0x38c>)
 80022e4:	fba3 1302 	umull	r1, r3, r3, r2
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	2164      	movs	r1, #100	; 0x64
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	3332      	adds	r3, #50	; 0x32
 80022f6:	4a87      	ldr	r2, [pc, #540]	; (8002514 <UART_SetConfig+0x38c>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002304:	441e      	add	r6, r3
 8002306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002308:	4618      	mov	r0, r3
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	1894      	adds	r4, r2, r2
 8002314:	623c      	str	r4, [r7, #32]
 8002316:	415b      	adcs	r3, r3
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
 800231a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800231e:	1812      	adds	r2, r2, r0
 8002320:	eb41 0303 	adc.w	r3, r1, r3
 8002324:	f04f 0400 	mov.w	r4, #0
 8002328:	f04f 0500 	mov.w	r5, #0
 800232c:	00dd      	lsls	r5, r3, #3
 800232e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002332:	00d4      	lsls	r4, r2, #3
 8002334:	4622      	mov	r2, r4
 8002336:	462b      	mov	r3, r5
 8002338:	1814      	adds	r4, r2, r0
 800233a:	653c      	str	r4, [r7, #80]	; 0x50
 800233c:	414b      	adcs	r3, r1
 800233e:	657b      	str	r3, [r7, #84]	; 0x54
 8002340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	461a      	mov	r2, r3
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	1891      	adds	r1, r2, r2
 800234c:	61b9      	str	r1, [r7, #24]
 800234e:	415b      	adcs	r3, r3
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002356:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800235a:	f7fd ffa1 	bl	80002a0 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <UART_SetConfig+0x38c>)
 8002364:	fba3 1302 	umull	r1, r3, r3, r2
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	2164      	movs	r1, #100	; 0x64
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	3332      	adds	r3, #50	; 0x32
 8002376:	4a67      	ldr	r2, [pc, #412]	; (8002514 <UART_SetConfig+0x38c>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	f003 0207 	and.w	r2, r3, #7
 8002382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4432      	add	r2, r6
 8002388:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800238a:	e0b9      	b.n	8002500 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800238c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800238e:	461c      	mov	r4, r3
 8002390:	f04f 0500 	mov.w	r5, #0
 8002394:	4622      	mov	r2, r4
 8002396:	462b      	mov	r3, r5
 8002398:	1891      	adds	r1, r2, r2
 800239a:	6139      	str	r1, [r7, #16]
 800239c:	415b      	adcs	r3, r3
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023a4:	1912      	adds	r2, r2, r4
 80023a6:	eb45 0303 	adc.w	r3, r5, r3
 80023aa:	f04f 0000 	mov.w	r0, #0
 80023ae:	f04f 0100 	mov.w	r1, #0
 80023b2:	00d9      	lsls	r1, r3, #3
 80023b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023b8:	00d0      	lsls	r0, r2, #3
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	eb12 0804 	adds.w	r8, r2, r4
 80023c2:	eb43 0905 	adc.w	r9, r3, r5
 80023c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	008b      	lsls	r3, r1, #2
 80023da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023de:	0082      	lsls	r2, r0, #2
 80023e0:	4640      	mov	r0, r8
 80023e2:	4649      	mov	r1, r9
 80023e4:	f7fd ff5c 	bl	80002a0 <__aeabi_uldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4b49      	ldr	r3, [pc, #292]	; (8002514 <UART_SetConfig+0x38c>)
 80023ee:	fba3 2302 	umull	r2, r3, r3, r2
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	011e      	lsls	r6, r3, #4
 80023f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f8:	4618      	mov	r0, r3
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	1894      	adds	r4, r2, r2
 8002404:	60bc      	str	r4, [r7, #8]
 8002406:	415b      	adcs	r3, r3
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800240e:	1812      	adds	r2, r2, r0
 8002410:	eb41 0303 	adc.w	r3, r1, r3
 8002414:	f04f 0400 	mov.w	r4, #0
 8002418:	f04f 0500 	mov.w	r5, #0
 800241c:	00dd      	lsls	r5, r3, #3
 800241e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002422:	00d4      	lsls	r4, r2, #3
 8002424:	4622      	mov	r2, r4
 8002426:	462b      	mov	r3, r5
 8002428:	1814      	adds	r4, r2, r0
 800242a:	64bc      	str	r4, [r7, #72]	; 0x48
 800242c:	414b      	adcs	r3, r1
 800242e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	008b      	lsls	r3, r1, #2
 8002444:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002448:	0082      	lsls	r2, r0, #2
 800244a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800244e:	f7fd ff27 	bl	80002a0 <__aeabi_uldivmod>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <UART_SetConfig+0x38c>)
 8002458:	fba3 1302 	umull	r1, r3, r3, r2
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	2164      	movs	r1, #100	; 0x64
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	3332      	adds	r3, #50	; 0x32
 800246a:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <UART_SetConfig+0x38c>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002476:	441e      	add	r6, r3
 8002478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247a:	4618      	mov	r0, r3
 800247c:	f04f 0100 	mov.w	r1, #0
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	1894      	adds	r4, r2, r2
 8002486:	603c      	str	r4, [r7, #0]
 8002488:	415b      	adcs	r3, r3
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002490:	1812      	adds	r2, r2, r0
 8002492:	eb41 0303 	adc.w	r3, r1, r3
 8002496:	f04f 0400 	mov.w	r4, #0
 800249a:	f04f 0500 	mov.w	r5, #0
 800249e:	00dd      	lsls	r5, r3, #3
 80024a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024a4:	00d4      	lsls	r4, r2, #3
 80024a6:	4622      	mov	r2, r4
 80024a8:	462b      	mov	r3, r5
 80024aa:	eb12 0a00 	adds.w	sl, r2, r0
 80024ae:	eb43 0b01 	adc.w	fp, r3, r1
 80024b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	008b      	lsls	r3, r1, #2
 80024c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024ca:	0082      	lsls	r2, r0, #2
 80024cc:	4650      	mov	r0, sl
 80024ce:	4659      	mov	r1, fp
 80024d0:	f7fd fee6 	bl	80002a0 <__aeabi_uldivmod>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <UART_SetConfig+0x38c>)
 80024da:	fba3 1302 	umull	r1, r3, r3, r2
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	2164      	movs	r1, #100	; 0x64
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	3332      	adds	r3, #50	; 0x32
 80024ec:	4a09      	ldr	r2, [pc, #36]	; (8002514 <UART_SetConfig+0x38c>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	f003 020f 	and.w	r2, r3, #15
 80024f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4432      	add	r2, r6
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	377c      	adds	r7, #124	; 0x7c
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800250a:	bf00      	nop
 800250c:	40011000 	.word	0x40011000
 8002510:	40011400 	.word	0x40011400
 8002514:	51eb851f 	.word	0x51eb851f

08002518 <main>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

int main(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0


  debounceInit(); /*función de inicialización de la MEF*/
 800251c:	f7fe f83c 	bl	8000598 <debounceInit>
  blinkyInit();
 8002520:	f7fe fa5e 	bl	80009e0 <blinkyInit>
  uartInit();
 8002524:	f7fe f910 	bl	8000748 <uartInit>

  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <main+0x28>)
 800252a:	f000 f889 	bl	8002640 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <main+0x2c>)
 8002530:	f000 f886 	bl	8002640 <iprintf>
  //char myString[]="Hola Mundo. Muy buena materia PdM.\n\r";

  while (1)
  {

	   debounceUpdate(); //Actualización de la MEF del antirebote
 8002534:	f7fe f84c 	bl	80005d0 <debounceUpdate>
	   blinkyUpdate();
 8002538:	f7fe fa94 	bl	8000a64 <blinkyUpdate>
	   debounceUpdate(); //Actualización de la MEF del antirebote
 800253c:	e7fa      	b.n	8002534 <main+0x1c>
 800253e:	bf00      	nop
 8002540:	080035d4 	.word	0x080035d4
 8002544:	08003624 	.word	0x08003624

08002548 <__io_putchar>:
  }
}


PUTCHAR_PROTOTYPE
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8002550:	1d39      	adds	r1, r7, #4
 8002552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002556:	2201      	movs	r2, #1
 8002558:	4803      	ldr	r0, [pc, #12]	; (8002568 <__io_putchar+0x20>)
 800255a:	f7ff fd14 	bl	8001f86 <HAL_UART_Transmit>

  return ch;
 800255e:	687b      	ldr	r3, [r7, #4]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200000e0 	.word	0x200000e0

0800256c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800256c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002570:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002572:	e003      	b.n	800257c <LoopCopyDataInit>

08002574 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002576:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002578:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800257a:	3104      	adds	r1, #4

0800257c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800257c:	480b      	ldr	r0, [pc, #44]	; (80025ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002580:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002582:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002584:	d3f6      	bcc.n	8002574 <CopyDataInit>
  ldr  r2, =_sbss
 8002586:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002588:	e002      	b.n	8002590 <LoopFillZerobss>

0800258a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800258a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800258c:	f842 3b04 	str.w	r3, [r2], #4

08002590 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002592:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002594:	d3f9      	bcc.n	800258a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002596:	f7fe fb61 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259a:	f000 f817 	bl	80025cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259e:	f7ff ffbb 	bl	8002518 <main>
  bx  lr    
 80025a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80025a8:	08003714 	.word	0x08003714
  ldr  r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025b0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80025b4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80025b8:	20000138 	.word	0x20000138

080025bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025bc:	e7fe      	b.n	80025bc <ADC_IRQHandler>
	...

080025c0 <__errno>:
 80025c0:	4b01      	ldr	r3, [pc, #4]	; (80025c8 <__errno+0x8>)
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2000001c 	.word	0x2000001c

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	4d0d      	ldr	r5, [pc, #52]	; (8002604 <__libc_init_array+0x38>)
 80025d0:	4c0d      	ldr	r4, [pc, #52]	; (8002608 <__libc_init_array+0x3c>)
 80025d2:	1b64      	subs	r4, r4, r5
 80025d4:	10a4      	asrs	r4, r4, #2
 80025d6:	2600      	movs	r6, #0
 80025d8:	42a6      	cmp	r6, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	4d0b      	ldr	r5, [pc, #44]	; (800260c <__libc_init_array+0x40>)
 80025de:	4c0c      	ldr	r4, [pc, #48]	; (8002610 <__libc_init_array+0x44>)
 80025e0:	f000 ff84 	bl	80034ec <_init>
 80025e4:	1b64      	subs	r4, r4, r5
 80025e6:	10a4      	asrs	r4, r4, #2
 80025e8:	2600      	movs	r6, #0
 80025ea:	42a6      	cmp	r6, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f4:	4798      	blx	r3
 80025f6:	3601      	adds	r6, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fe:	4798      	blx	r3
 8002600:	3601      	adds	r6, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	0800370c 	.word	0x0800370c
 8002608:	0800370c 	.word	0x0800370c
 800260c:	0800370c 	.word	0x0800370c
 8002610:	08003710 	.word	0x08003710

08002614 <memcpy>:
 8002614:	440a      	add	r2, r1
 8002616:	4291      	cmp	r1, r2
 8002618:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800261c:	d100      	bne.n	8002620 <memcpy+0xc>
 800261e:	4770      	bx	lr
 8002620:	b510      	push	{r4, lr}
 8002622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800262a:	4291      	cmp	r1, r2
 800262c:	d1f9      	bne.n	8002622 <memcpy+0xe>
 800262e:	bd10      	pop	{r4, pc}

08002630 <memset>:
 8002630:	4402      	add	r2, r0
 8002632:	4603      	mov	r3, r0
 8002634:	4293      	cmp	r3, r2
 8002636:	d100      	bne.n	800263a <memset+0xa>
 8002638:	4770      	bx	lr
 800263a:	f803 1b01 	strb.w	r1, [r3], #1
 800263e:	e7f9      	b.n	8002634 <memset+0x4>

08002640 <iprintf>:
 8002640:	b40f      	push	{r0, r1, r2, r3}
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <iprintf+0x2c>)
 8002644:	b513      	push	{r0, r1, r4, lr}
 8002646:	681c      	ldr	r4, [r3, #0]
 8002648:	b124      	cbz	r4, 8002654 <iprintf+0x14>
 800264a:	69a3      	ldr	r3, [r4, #24]
 800264c:	b913      	cbnz	r3, 8002654 <iprintf+0x14>
 800264e:	4620      	mov	r0, r4
 8002650:	f000 f866 	bl	8002720 <__sinit>
 8002654:	ab05      	add	r3, sp, #20
 8002656:	9a04      	ldr	r2, [sp, #16]
 8002658:	68a1      	ldr	r1, [r4, #8]
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	4620      	mov	r0, r4
 800265e:	f000 f983 	bl	8002968 <_vfiprintf_r>
 8002662:	b002      	add	sp, #8
 8002664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002668:	b004      	add	sp, #16
 800266a:	4770      	bx	lr
 800266c:	2000001c 	.word	0x2000001c

08002670 <std>:
 8002670:	2300      	movs	r3, #0
 8002672:	b510      	push	{r4, lr}
 8002674:	4604      	mov	r4, r0
 8002676:	e9c0 3300 	strd	r3, r3, [r0]
 800267a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800267e:	6083      	str	r3, [r0, #8]
 8002680:	8181      	strh	r1, [r0, #12]
 8002682:	6643      	str	r3, [r0, #100]	; 0x64
 8002684:	81c2      	strh	r2, [r0, #14]
 8002686:	6183      	str	r3, [r0, #24]
 8002688:	4619      	mov	r1, r3
 800268a:	2208      	movs	r2, #8
 800268c:	305c      	adds	r0, #92	; 0x5c
 800268e:	f7ff ffcf 	bl	8002630 <memset>
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <std+0x38>)
 8002694:	6263      	str	r3, [r4, #36]	; 0x24
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <std+0x3c>)
 8002698:	62a3      	str	r3, [r4, #40]	; 0x28
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <std+0x40>)
 800269c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <std+0x44>)
 80026a0:	6224      	str	r4, [r4, #32]
 80026a2:	6323      	str	r3, [r4, #48]	; 0x30
 80026a4:	bd10      	pop	{r4, pc}
 80026a6:	bf00      	nop
 80026a8:	08002f11 	.word	0x08002f11
 80026ac:	08002f33 	.word	0x08002f33
 80026b0:	08002f6b 	.word	0x08002f6b
 80026b4:	08002f8f 	.word	0x08002f8f

080026b8 <_cleanup_r>:
 80026b8:	4901      	ldr	r1, [pc, #4]	; (80026c0 <_cleanup_r+0x8>)
 80026ba:	f000 b8af 	b.w	800281c <_fwalk_reent>
 80026be:	bf00      	nop
 80026c0:	08003269 	.word	0x08003269

080026c4 <__sfmoreglue>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	1e4a      	subs	r2, r1, #1
 80026c8:	2568      	movs	r5, #104	; 0x68
 80026ca:	4355      	muls	r5, r2
 80026cc:	460e      	mov	r6, r1
 80026ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026d2:	f000 f8c5 	bl	8002860 <_malloc_r>
 80026d6:	4604      	mov	r4, r0
 80026d8:	b140      	cbz	r0, 80026ec <__sfmoreglue+0x28>
 80026da:	2100      	movs	r1, #0
 80026dc:	e9c0 1600 	strd	r1, r6, [r0]
 80026e0:	300c      	adds	r0, #12
 80026e2:	60a0      	str	r0, [r4, #8]
 80026e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026e8:	f7ff ffa2 	bl	8002630 <memset>
 80026ec:	4620      	mov	r0, r4
 80026ee:	bd70      	pop	{r4, r5, r6, pc}

080026f0 <__sfp_lock_acquire>:
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <__sfp_lock_acquire+0x8>)
 80026f2:	f000 b8b3 	b.w	800285c <__retarget_lock_acquire_recursive>
 80026f6:	bf00      	nop
 80026f8:	20000130 	.word	0x20000130

080026fc <__sfp_lock_release>:
 80026fc:	4801      	ldr	r0, [pc, #4]	; (8002704 <__sfp_lock_release+0x8>)
 80026fe:	f000 b8ae 	b.w	800285e <__retarget_lock_release_recursive>
 8002702:	bf00      	nop
 8002704:	20000130 	.word	0x20000130

08002708 <__sinit_lock_acquire>:
 8002708:	4801      	ldr	r0, [pc, #4]	; (8002710 <__sinit_lock_acquire+0x8>)
 800270a:	f000 b8a7 	b.w	800285c <__retarget_lock_acquire_recursive>
 800270e:	bf00      	nop
 8002710:	2000012b 	.word	0x2000012b

08002714 <__sinit_lock_release>:
 8002714:	4801      	ldr	r0, [pc, #4]	; (800271c <__sinit_lock_release+0x8>)
 8002716:	f000 b8a2 	b.w	800285e <__retarget_lock_release_recursive>
 800271a:	bf00      	nop
 800271c:	2000012b 	.word	0x2000012b

08002720 <__sinit>:
 8002720:	b510      	push	{r4, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	f7ff fff0 	bl	8002708 <__sinit_lock_acquire>
 8002728:	69a3      	ldr	r3, [r4, #24]
 800272a:	b11b      	cbz	r3, 8002734 <__sinit+0x14>
 800272c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002730:	f7ff bff0 	b.w	8002714 <__sinit_lock_release>
 8002734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002738:	6523      	str	r3, [r4, #80]	; 0x50
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <__sinit+0x68>)
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <__sinit+0x6c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	62a2      	str	r2, [r4, #40]	; 0x28
 8002742:	42a3      	cmp	r3, r4
 8002744:	bf04      	itt	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	61a3      	streq	r3, [r4, #24]
 800274a:	4620      	mov	r0, r4
 800274c:	f000 f820 	bl	8002790 <__sfp>
 8002750:	6060      	str	r0, [r4, #4]
 8002752:	4620      	mov	r0, r4
 8002754:	f000 f81c 	bl	8002790 <__sfp>
 8002758:	60a0      	str	r0, [r4, #8]
 800275a:	4620      	mov	r0, r4
 800275c:	f000 f818 	bl	8002790 <__sfp>
 8002760:	2200      	movs	r2, #0
 8002762:	60e0      	str	r0, [r4, #12]
 8002764:	2104      	movs	r1, #4
 8002766:	6860      	ldr	r0, [r4, #4]
 8002768:	f7ff ff82 	bl	8002670 <std>
 800276c:	68a0      	ldr	r0, [r4, #8]
 800276e:	2201      	movs	r2, #1
 8002770:	2109      	movs	r1, #9
 8002772:	f7ff ff7d 	bl	8002670 <std>
 8002776:	68e0      	ldr	r0, [r4, #12]
 8002778:	2202      	movs	r2, #2
 800277a:	2112      	movs	r1, #18
 800277c:	f7ff ff78 	bl	8002670 <std>
 8002780:	2301      	movs	r3, #1
 8002782:	61a3      	str	r3, [r4, #24]
 8002784:	e7d2      	b.n	800272c <__sinit+0xc>
 8002786:	bf00      	nop
 8002788:	0800366c 	.word	0x0800366c
 800278c:	080026b9 	.word	0x080026b9

08002790 <__sfp>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	4607      	mov	r7, r0
 8002794:	f7ff ffac 	bl	80026f0 <__sfp_lock_acquire>
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <__sfp+0x84>)
 800279a:	681e      	ldr	r6, [r3, #0]
 800279c:	69b3      	ldr	r3, [r6, #24]
 800279e:	b913      	cbnz	r3, 80027a6 <__sfp+0x16>
 80027a0:	4630      	mov	r0, r6
 80027a2:	f7ff ffbd 	bl	8002720 <__sinit>
 80027a6:	3648      	adds	r6, #72	; 0x48
 80027a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	d503      	bpl.n	80027b8 <__sfp+0x28>
 80027b0:	6833      	ldr	r3, [r6, #0]
 80027b2:	b30b      	cbz	r3, 80027f8 <__sfp+0x68>
 80027b4:	6836      	ldr	r6, [r6, #0]
 80027b6:	e7f7      	b.n	80027a8 <__sfp+0x18>
 80027b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027bc:	b9d5      	cbnz	r5, 80027f4 <__sfp+0x64>
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <__sfp+0x88>)
 80027c0:	60e3      	str	r3, [r4, #12]
 80027c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027c6:	6665      	str	r5, [r4, #100]	; 0x64
 80027c8:	f000 f847 	bl	800285a <__retarget_lock_init_recursive>
 80027cc:	f7ff ff96 	bl	80026fc <__sfp_lock_release>
 80027d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027d8:	6025      	str	r5, [r4, #0]
 80027da:	61a5      	str	r5, [r4, #24]
 80027dc:	2208      	movs	r2, #8
 80027de:	4629      	mov	r1, r5
 80027e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027e4:	f7ff ff24 	bl	8002630 <memset>
 80027e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027f0:	4620      	mov	r0, r4
 80027f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f4:	3468      	adds	r4, #104	; 0x68
 80027f6:	e7d9      	b.n	80027ac <__sfp+0x1c>
 80027f8:	2104      	movs	r1, #4
 80027fa:	4638      	mov	r0, r7
 80027fc:	f7ff ff62 	bl	80026c4 <__sfmoreglue>
 8002800:	4604      	mov	r4, r0
 8002802:	6030      	str	r0, [r6, #0]
 8002804:	2800      	cmp	r0, #0
 8002806:	d1d5      	bne.n	80027b4 <__sfp+0x24>
 8002808:	f7ff ff78 	bl	80026fc <__sfp_lock_release>
 800280c:	230c      	movs	r3, #12
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	e7ee      	b.n	80027f0 <__sfp+0x60>
 8002812:	bf00      	nop
 8002814:	0800366c 	.word	0x0800366c
 8002818:	ffff0001 	.word	0xffff0001

0800281c <_fwalk_reent>:
 800281c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002820:	4606      	mov	r6, r0
 8002822:	4688      	mov	r8, r1
 8002824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002828:	2700      	movs	r7, #0
 800282a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800282e:	f1b9 0901 	subs.w	r9, r9, #1
 8002832:	d505      	bpl.n	8002840 <_fwalk_reent+0x24>
 8002834:	6824      	ldr	r4, [r4, #0]
 8002836:	2c00      	cmp	r4, #0
 8002838:	d1f7      	bne.n	800282a <_fwalk_reent+0xe>
 800283a:	4638      	mov	r0, r7
 800283c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002840:	89ab      	ldrh	r3, [r5, #12]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d907      	bls.n	8002856 <_fwalk_reent+0x3a>
 8002846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800284a:	3301      	adds	r3, #1
 800284c:	d003      	beq.n	8002856 <_fwalk_reent+0x3a>
 800284e:	4629      	mov	r1, r5
 8002850:	4630      	mov	r0, r6
 8002852:	47c0      	blx	r8
 8002854:	4307      	orrs	r7, r0
 8002856:	3568      	adds	r5, #104	; 0x68
 8002858:	e7e9      	b.n	800282e <_fwalk_reent+0x12>

0800285a <__retarget_lock_init_recursive>:
 800285a:	4770      	bx	lr

0800285c <__retarget_lock_acquire_recursive>:
 800285c:	4770      	bx	lr

0800285e <__retarget_lock_release_recursive>:
 800285e:	4770      	bx	lr

08002860 <_malloc_r>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	1ccd      	adds	r5, r1, #3
 8002864:	f025 0503 	bic.w	r5, r5, #3
 8002868:	3508      	adds	r5, #8
 800286a:	2d0c      	cmp	r5, #12
 800286c:	bf38      	it	cc
 800286e:	250c      	movcc	r5, #12
 8002870:	2d00      	cmp	r5, #0
 8002872:	4606      	mov	r6, r0
 8002874:	db01      	blt.n	800287a <_malloc_r+0x1a>
 8002876:	42a9      	cmp	r1, r5
 8002878:	d903      	bls.n	8002882 <_malloc_r+0x22>
 800287a:	230c      	movs	r3, #12
 800287c:	6033      	str	r3, [r6, #0]
 800287e:	2000      	movs	r0, #0
 8002880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002882:	f000 fda3 	bl	80033cc <__malloc_lock>
 8002886:	4921      	ldr	r1, [pc, #132]	; (800290c <_malloc_r+0xac>)
 8002888:	680a      	ldr	r2, [r1, #0]
 800288a:	4614      	mov	r4, r2
 800288c:	b99c      	cbnz	r4, 80028b6 <_malloc_r+0x56>
 800288e:	4f20      	ldr	r7, [pc, #128]	; (8002910 <_malloc_r+0xb0>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b923      	cbnz	r3, 800289e <_malloc_r+0x3e>
 8002894:	4621      	mov	r1, r4
 8002896:	4630      	mov	r0, r6
 8002898:	f000 fb2a 	bl	8002ef0 <_sbrk_r>
 800289c:	6038      	str	r0, [r7, #0]
 800289e:	4629      	mov	r1, r5
 80028a0:	4630      	mov	r0, r6
 80028a2:	f000 fb25 	bl	8002ef0 <_sbrk_r>
 80028a6:	1c43      	adds	r3, r0, #1
 80028a8:	d123      	bne.n	80028f2 <_malloc_r+0x92>
 80028aa:	230c      	movs	r3, #12
 80028ac:	6033      	str	r3, [r6, #0]
 80028ae:	4630      	mov	r0, r6
 80028b0:	f000 fd92 	bl	80033d8 <__malloc_unlock>
 80028b4:	e7e3      	b.n	800287e <_malloc_r+0x1e>
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	1b5b      	subs	r3, r3, r5
 80028ba:	d417      	bmi.n	80028ec <_malloc_r+0x8c>
 80028bc:	2b0b      	cmp	r3, #11
 80028be:	d903      	bls.n	80028c8 <_malloc_r+0x68>
 80028c0:	6023      	str	r3, [r4, #0]
 80028c2:	441c      	add	r4, r3
 80028c4:	6025      	str	r5, [r4, #0]
 80028c6:	e004      	b.n	80028d2 <_malloc_r+0x72>
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	42a2      	cmp	r2, r4
 80028cc:	bf0c      	ite	eq
 80028ce:	600b      	streq	r3, [r1, #0]
 80028d0:	6053      	strne	r3, [r2, #4]
 80028d2:	4630      	mov	r0, r6
 80028d4:	f000 fd80 	bl	80033d8 <__malloc_unlock>
 80028d8:	f104 000b 	add.w	r0, r4, #11
 80028dc:	1d23      	adds	r3, r4, #4
 80028de:	f020 0007 	bic.w	r0, r0, #7
 80028e2:	1ac2      	subs	r2, r0, r3
 80028e4:	d0cc      	beq.n	8002880 <_malloc_r+0x20>
 80028e6:	1a1b      	subs	r3, r3, r0
 80028e8:	50a3      	str	r3, [r4, r2]
 80028ea:	e7c9      	b.n	8002880 <_malloc_r+0x20>
 80028ec:	4622      	mov	r2, r4
 80028ee:	6864      	ldr	r4, [r4, #4]
 80028f0:	e7cc      	b.n	800288c <_malloc_r+0x2c>
 80028f2:	1cc4      	adds	r4, r0, #3
 80028f4:	f024 0403 	bic.w	r4, r4, #3
 80028f8:	42a0      	cmp	r0, r4
 80028fa:	d0e3      	beq.n	80028c4 <_malloc_r+0x64>
 80028fc:	1a21      	subs	r1, r4, r0
 80028fe:	4630      	mov	r0, r6
 8002900:	f000 faf6 	bl	8002ef0 <_sbrk_r>
 8002904:	3001      	adds	r0, #1
 8002906:	d1dd      	bne.n	80028c4 <_malloc_r+0x64>
 8002908:	e7cf      	b.n	80028aa <_malloc_r+0x4a>
 800290a:	bf00      	nop
 800290c:	200000d8 	.word	0x200000d8
 8002910:	200000dc 	.word	0x200000dc

08002914 <__sfputc_r>:
 8002914:	6893      	ldr	r3, [r2, #8]
 8002916:	3b01      	subs	r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	b410      	push	{r4}
 800291c:	6093      	str	r3, [r2, #8]
 800291e:	da08      	bge.n	8002932 <__sfputc_r+0x1e>
 8002920:	6994      	ldr	r4, [r2, #24]
 8002922:	42a3      	cmp	r3, r4
 8002924:	db01      	blt.n	800292a <__sfputc_r+0x16>
 8002926:	290a      	cmp	r1, #10
 8002928:	d103      	bne.n	8002932 <__sfputc_r+0x1e>
 800292a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800292e:	f000 bb33 	b.w	8002f98 <__swbuf_r>
 8002932:	6813      	ldr	r3, [r2, #0]
 8002934:	1c58      	adds	r0, r3, #1
 8002936:	6010      	str	r0, [r2, #0]
 8002938:	7019      	strb	r1, [r3, #0]
 800293a:	4608      	mov	r0, r1
 800293c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002940:	4770      	bx	lr

08002942 <__sfputs_r>:
 8002942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002944:	4606      	mov	r6, r0
 8002946:	460f      	mov	r7, r1
 8002948:	4614      	mov	r4, r2
 800294a:	18d5      	adds	r5, r2, r3
 800294c:	42ac      	cmp	r4, r5
 800294e:	d101      	bne.n	8002954 <__sfputs_r+0x12>
 8002950:	2000      	movs	r0, #0
 8002952:	e007      	b.n	8002964 <__sfputs_r+0x22>
 8002954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002958:	463a      	mov	r2, r7
 800295a:	4630      	mov	r0, r6
 800295c:	f7ff ffda 	bl	8002914 <__sfputc_r>
 8002960:	1c43      	adds	r3, r0, #1
 8002962:	d1f3      	bne.n	800294c <__sfputs_r+0xa>
 8002964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002968 <_vfiprintf_r>:
 8002968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296c:	460d      	mov	r5, r1
 800296e:	b09d      	sub	sp, #116	; 0x74
 8002970:	4614      	mov	r4, r2
 8002972:	4698      	mov	r8, r3
 8002974:	4606      	mov	r6, r0
 8002976:	b118      	cbz	r0, 8002980 <_vfiprintf_r+0x18>
 8002978:	6983      	ldr	r3, [r0, #24]
 800297a:	b90b      	cbnz	r3, 8002980 <_vfiprintf_r+0x18>
 800297c:	f7ff fed0 	bl	8002720 <__sinit>
 8002980:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <_vfiprintf_r+0x240>)
 8002982:	429d      	cmp	r5, r3
 8002984:	d11b      	bne.n	80029be <_vfiprintf_r+0x56>
 8002986:	6875      	ldr	r5, [r6, #4]
 8002988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800298a:	07d9      	lsls	r1, r3, #31
 800298c:	d405      	bmi.n	800299a <_vfiprintf_r+0x32>
 800298e:	89ab      	ldrh	r3, [r5, #12]
 8002990:	059a      	lsls	r2, r3, #22
 8002992:	d402      	bmi.n	800299a <_vfiprintf_r+0x32>
 8002994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002996:	f7ff ff61 	bl	800285c <__retarget_lock_acquire_recursive>
 800299a:	89ab      	ldrh	r3, [r5, #12]
 800299c:	071b      	lsls	r3, r3, #28
 800299e:	d501      	bpl.n	80029a4 <_vfiprintf_r+0x3c>
 80029a0:	692b      	ldr	r3, [r5, #16]
 80029a2:	b9eb      	cbnz	r3, 80029e0 <_vfiprintf_r+0x78>
 80029a4:	4629      	mov	r1, r5
 80029a6:	4630      	mov	r0, r6
 80029a8:	f000 fb5a 	bl	8003060 <__swsetup_r>
 80029ac:	b1c0      	cbz	r0, 80029e0 <_vfiprintf_r+0x78>
 80029ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029b0:	07dc      	lsls	r4, r3, #31
 80029b2:	d50e      	bpl.n	80029d2 <_vfiprintf_r+0x6a>
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b8:	b01d      	add	sp, #116	; 0x74
 80029ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029be:	4b7b      	ldr	r3, [pc, #492]	; (8002bac <_vfiprintf_r+0x244>)
 80029c0:	429d      	cmp	r5, r3
 80029c2:	d101      	bne.n	80029c8 <_vfiprintf_r+0x60>
 80029c4:	68b5      	ldr	r5, [r6, #8]
 80029c6:	e7df      	b.n	8002988 <_vfiprintf_r+0x20>
 80029c8:	4b79      	ldr	r3, [pc, #484]	; (8002bb0 <_vfiprintf_r+0x248>)
 80029ca:	429d      	cmp	r5, r3
 80029cc:	bf08      	it	eq
 80029ce:	68f5      	ldreq	r5, [r6, #12]
 80029d0:	e7da      	b.n	8002988 <_vfiprintf_r+0x20>
 80029d2:	89ab      	ldrh	r3, [r5, #12]
 80029d4:	0598      	lsls	r0, r3, #22
 80029d6:	d4ed      	bmi.n	80029b4 <_vfiprintf_r+0x4c>
 80029d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029da:	f7ff ff40 	bl	800285e <__retarget_lock_release_recursive>
 80029de:	e7e9      	b.n	80029b4 <_vfiprintf_r+0x4c>
 80029e0:	2300      	movs	r3, #0
 80029e2:	9309      	str	r3, [sp, #36]	; 0x24
 80029e4:	2320      	movs	r3, #32
 80029e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80029ee:	2330      	movs	r3, #48	; 0x30
 80029f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002bb4 <_vfiprintf_r+0x24c>
 80029f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029f8:	f04f 0901 	mov.w	r9, #1
 80029fc:	4623      	mov	r3, r4
 80029fe:	469a      	mov	sl, r3
 8002a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a04:	b10a      	cbz	r2, 8002a0a <_vfiprintf_r+0xa2>
 8002a06:	2a25      	cmp	r2, #37	; 0x25
 8002a08:	d1f9      	bne.n	80029fe <_vfiprintf_r+0x96>
 8002a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8002a0e:	d00b      	beq.n	8002a28 <_vfiprintf_r+0xc0>
 8002a10:	465b      	mov	r3, fp
 8002a12:	4622      	mov	r2, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	4630      	mov	r0, r6
 8002a18:	f7ff ff93 	bl	8002942 <__sfputs_r>
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	f000 80aa 	beq.w	8002b76 <_vfiprintf_r+0x20e>
 8002a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a24:	445a      	add	r2, fp
 8002a26:	9209      	str	r2, [sp, #36]	; 0x24
 8002a28:	f89a 3000 	ldrb.w	r3, [sl]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a2 	beq.w	8002b76 <_vfiprintf_r+0x20e>
 8002a32:	2300      	movs	r3, #0
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a3c:	f10a 0a01 	add.w	sl, sl, #1
 8002a40:	9304      	str	r3, [sp, #16]
 8002a42:	9307      	str	r3, [sp, #28]
 8002a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a48:	931a      	str	r3, [sp, #104]	; 0x68
 8002a4a:	4654      	mov	r4, sl
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a52:	4858      	ldr	r0, [pc, #352]	; (8002bb4 <_vfiprintf_r+0x24c>)
 8002a54:	f7fd fbd4 	bl	8000200 <memchr>
 8002a58:	9a04      	ldr	r2, [sp, #16]
 8002a5a:	b9d8      	cbnz	r0, 8002a94 <_vfiprintf_r+0x12c>
 8002a5c:	06d1      	lsls	r1, r2, #27
 8002a5e:	bf44      	itt	mi
 8002a60:	2320      	movmi	r3, #32
 8002a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a66:	0713      	lsls	r3, r2, #28
 8002a68:	bf44      	itt	mi
 8002a6a:	232b      	movmi	r3, #43	; 0x2b
 8002a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a70:	f89a 3000 	ldrb.w	r3, [sl]
 8002a74:	2b2a      	cmp	r3, #42	; 0x2a
 8002a76:	d015      	beq.n	8002aa4 <_vfiprintf_r+0x13c>
 8002a78:	9a07      	ldr	r2, [sp, #28]
 8002a7a:	4654      	mov	r4, sl
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f04f 0c0a 	mov.w	ip, #10
 8002a82:	4621      	mov	r1, r4
 8002a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a88:	3b30      	subs	r3, #48	; 0x30
 8002a8a:	2b09      	cmp	r3, #9
 8002a8c:	d94e      	bls.n	8002b2c <_vfiprintf_r+0x1c4>
 8002a8e:	b1b0      	cbz	r0, 8002abe <_vfiprintf_r+0x156>
 8002a90:	9207      	str	r2, [sp, #28]
 8002a92:	e014      	b.n	8002abe <_vfiprintf_r+0x156>
 8002a94:	eba0 0308 	sub.w	r3, r0, r8
 8002a98:	fa09 f303 	lsl.w	r3, r9, r3
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	9304      	str	r3, [sp, #16]
 8002aa0:	46a2      	mov	sl, r4
 8002aa2:	e7d2      	b.n	8002a4a <_vfiprintf_r+0xe2>
 8002aa4:	9b03      	ldr	r3, [sp, #12]
 8002aa6:	1d19      	adds	r1, r3, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	9103      	str	r1, [sp, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bfbb      	ittet	lt
 8002ab0:	425b      	neglt	r3, r3
 8002ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8002ab6:	9307      	strge	r3, [sp, #28]
 8002ab8:	9307      	strlt	r3, [sp, #28]
 8002aba:	bfb8      	it	lt
 8002abc:	9204      	strlt	r2, [sp, #16]
 8002abe:	7823      	ldrb	r3, [r4, #0]
 8002ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ac2:	d10c      	bne.n	8002ade <_vfiprintf_r+0x176>
 8002ac4:	7863      	ldrb	r3, [r4, #1]
 8002ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ac8:	d135      	bne.n	8002b36 <_vfiprintf_r+0x1ce>
 8002aca:	9b03      	ldr	r3, [sp, #12]
 8002acc:	1d1a      	adds	r2, r3, #4
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	9203      	str	r2, [sp, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bfb8      	it	lt
 8002ad6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ada:	3402      	adds	r4, #2
 8002adc:	9305      	str	r3, [sp, #20]
 8002ade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002bc4 <_vfiprintf_r+0x25c>
 8002ae2:	7821      	ldrb	r1, [r4, #0]
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4650      	mov	r0, sl
 8002ae8:	f7fd fb8a 	bl	8000200 <memchr>
 8002aec:	b140      	cbz	r0, 8002b00 <_vfiprintf_r+0x198>
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	eba0 000a 	sub.w	r0, r0, sl
 8002af4:	fa03 f000 	lsl.w	r0, r3, r0
 8002af8:	9b04      	ldr	r3, [sp, #16]
 8002afa:	4303      	orrs	r3, r0
 8002afc:	3401      	adds	r4, #1
 8002afe:	9304      	str	r3, [sp, #16]
 8002b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b04:	482c      	ldr	r0, [pc, #176]	; (8002bb8 <_vfiprintf_r+0x250>)
 8002b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b0a:	2206      	movs	r2, #6
 8002b0c:	f7fd fb78 	bl	8000200 <memchr>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d03f      	beq.n	8002b94 <_vfiprintf_r+0x22c>
 8002b14:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <_vfiprintf_r+0x254>)
 8002b16:	bb1b      	cbnz	r3, 8002b60 <_vfiprintf_r+0x1f8>
 8002b18:	9b03      	ldr	r3, [sp, #12]
 8002b1a:	3307      	adds	r3, #7
 8002b1c:	f023 0307 	bic.w	r3, r3, #7
 8002b20:	3308      	adds	r3, #8
 8002b22:	9303      	str	r3, [sp, #12]
 8002b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b26:	443b      	add	r3, r7
 8002b28:	9309      	str	r3, [sp, #36]	; 0x24
 8002b2a:	e767      	b.n	80029fc <_vfiprintf_r+0x94>
 8002b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b30:	460c      	mov	r4, r1
 8002b32:	2001      	movs	r0, #1
 8002b34:	e7a5      	b.n	8002a82 <_vfiprintf_r+0x11a>
 8002b36:	2300      	movs	r3, #0
 8002b38:	3401      	adds	r4, #1
 8002b3a:	9305      	str	r3, [sp, #20]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f04f 0c0a 	mov.w	ip, #10
 8002b42:	4620      	mov	r0, r4
 8002b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b48:	3a30      	subs	r2, #48	; 0x30
 8002b4a:	2a09      	cmp	r2, #9
 8002b4c:	d903      	bls.n	8002b56 <_vfiprintf_r+0x1ee>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0c5      	beq.n	8002ade <_vfiprintf_r+0x176>
 8002b52:	9105      	str	r1, [sp, #20]
 8002b54:	e7c3      	b.n	8002ade <_vfiprintf_r+0x176>
 8002b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e7f0      	b.n	8002b42 <_vfiprintf_r+0x1da>
 8002b60:	ab03      	add	r3, sp, #12
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	462a      	mov	r2, r5
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <_vfiprintf_r+0x258>)
 8002b68:	a904      	add	r1, sp, #16
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f3af 8000 	nop.w
 8002b70:	4607      	mov	r7, r0
 8002b72:	1c78      	adds	r0, r7, #1
 8002b74:	d1d6      	bne.n	8002b24 <_vfiprintf_r+0x1bc>
 8002b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b78:	07d9      	lsls	r1, r3, #31
 8002b7a:	d405      	bmi.n	8002b88 <_vfiprintf_r+0x220>
 8002b7c:	89ab      	ldrh	r3, [r5, #12]
 8002b7e:	059a      	lsls	r2, r3, #22
 8002b80:	d402      	bmi.n	8002b88 <_vfiprintf_r+0x220>
 8002b82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b84:	f7ff fe6b 	bl	800285e <__retarget_lock_release_recursive>
 8002b88:	89ab      	ldrh	r3, [r5, #12]
 8002b8a:	065b      	lsls	r3, r3, #25
 8002b8c:	f53f af12 	bmi.w	80029b4 <_vfiprintf_r+0x4c>
 8002b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b92:	e711      	b.n	80029b8 <_vfiprintf_r+0x50>
 8002b94:	ab03      	add	r3, sp, #12
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	462a      	mov	r2, r5
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <_vfiprintf_r+0x258>)
 8002b9c:	a904      	add	r1, sp, #16
 8002b9e:	4630      	mov	r0, r6
 8002ba0:	f000 f880 	bl	8002ca4 <_printf_i>
 8002ba4:	e7e4      	b.n	8002b70 <_vfiprintf_r+0x208>
 8002ba6:	bf00      	nop
 8002ba8:	08003690 	.word	0x08003690
 8002bac:	080036b0 	.word	0x080036b0
 8002bb0:	08003670 	.word	0x08003670
 8002bb4:	080036d0 	.word	0x080036d0
 8002bb8:	080036da 	.word	0x080036da
 8002bbc:	00000000 	.word	0x00000000
 8002bc0:	08002943 	.word	0x08002943
 8002bc4:	080036d6 	.word	0x080036d6

08002bc8 <_printf_common>:
 8002bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bcc:	4616      	mov	r6, r2
 8002bce:	4699      	mov	r9, r3
 8002bd0:	688a      	ldr	r2, [r1, #8]
 8002bd2:	690b      	ldr	r3, [r1, #16]
 8002bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	bfb8      	it	lt
 8002bdc:	4613      	movlt	r3, r2
 8002bde:	6033      	str	r3, [r6, #0]
 8002be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002be4:	4607      	mov	r7, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	b10a      	cbz	r2, 8002bee <_printf_common+0x26>
 8002bea:	3301      	adds	r3, #1
 8002bec:	6033      	str	r3, [r6, #0]
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	0699      	lsls	r1, r3, #26
 8002bf2:	bf42      	ittt	mi
 8002bf4:	6833      	ldrmi	r3, [r6, #0]
 8002bf6:	3302      	addmi	r3, #2
 8002bf8:	6033      	strmi	r3, [r6, #0]
 8002bfa:	6825      	ldr	r5, [r4, #0]
 8002bfc:	f015 0506 	ands.w	r5, r5, #6
 8002c00:	d106      	bne.n	8002c10 <_printf_common+0x48>
 8002c02:	f104 0a19 	add.w	sl, r4, #25
 8002c06:	68e3      	ldr	r3, [r4, #12]
 8002c08:	6832      	ldr	r2, [r6, #0]
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	42ab      	cmp	r3, r5
 8002c0e:	dc26      	bgt.n	8002c5e <_printf_common+0x96>
 8002c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c14:	1e13      	subs	r3, r2, #0
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	bf18      	it	ne
 8002c1a:	2301      	movne	r3, #1
 8002c1c:	0692      	lsls	r2, r2, #26
 8002c1e:	d42b      	bmi.n	8002c78 <_printf_common+0xb0>
 8002c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c24:	4649      	mov	r1, r9
 8002c26:	4638      	mov	r0, r7
 8002c28:	47c0      	blx	r8
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d01e      	beq.n	8002c6c <_printf_common+0xa4>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	68e5      	ldr	r5, [r4, #12]
 8002c32:	6832      	ldr	r2, [r6, #0]
 8002c34:	f003 0306 	and.w	r3, r3, #6
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	bf08      	it	eq
 8002c3c:	1aad      	subeq	r5, r5, r2
 8002c3e:	68a3      	ldr	r3, [r4, #8]
 8002c40:	6922      	ldr	r2, [r4, #16]
 8002c42:	bf0c      	ite	eq
 8002c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c48:	2500      	movne	r5, #0
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	bfc4      	itt	gt
 8002c4e:	1a9b      	subgt	r3, r3, r2
 8002c50:	18ed      	addgt	r5, r5, r3
 8002c52:	2600      	movs	r6, #0
 8002c54:	341a      	adds	r4, #26
 8002c56:	42b5      	cmp	r5, r6
 8002c58:	d11a      	bne.n	8002c90 <_printf_common+0xc8>
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	e008      	b.n	8002c70 <_printf_common+0xa8>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	4652      	mov	r2, sl
 8002c62:	4649      	mov	r1, r9
 8002c64:	4638      	mov	r0, r7
 8002c66:	47c0      	blx	r8
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d103      	bne.n	8002c74 <_printf_common+0xac>
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c74:	3501      	adds	r5, #1
 8002c76:	e7c6      	b.n	8002c06 <_printf_common+0x3e>
 8002c78:	18e1      	adds	r1, r4, r3
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	2030      	movs	r0, #48	; 0x30
 8002c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c82:	4422      	add	r2, r4
 8002c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	e7c7      	b.n	8002c20 <_printf_common+0x58>
 8002c90:	2301      	movs	r3, #1
 8002c92:	4622      	mov	r2, r4
 8002c94:	4649      	mov	r1, r9
 8002c96:	4638      	mov	r0, r7
 8002c98:	47c0      	blx	r8
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	d0e6      	beq.n	8002c6c <_printf_common+0xa4>
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7d9      	b.n	8002c56 <_printf_common+0x8e>
	...

08002ca4 <_printf_i>:
 8002ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca8:	460c      	mov	r4, r1
 8002caa:	4691      	mov	r9, r2
 8002cac:	7e27      	ldrb	r7, [r4, #24]
 8002cae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002cb0:	2f78      	cmp	r7, #120	; 0x78
 8002cb2:	4680      	mov	r8, r0
 8002cb4:	469a      	mov	sl, r3
 8002cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cba:	d807      	bhi.n	8002ccc <_printf_i+0x28>
 8002cbc:	2f62      	cmp	r7, #98	; 0x62
 8002cbe:	d80a      	bhi.n	8002cd6 <_printf_i+0x32>
 8002cc0:	2f00      	cmp	r7, #0
 8002cc2:	f000 80d8 	beq.w	8002e76 <_printf_i+0x1d2>
 8002cc6:	2f58      	cmp	r7, #88	; 0x58
 8002cc8:	f000 80a3 	beq.w	8002e12 <_printf_i+0x16e>
 8002ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cd4:	e03a      	b.n	8002d4c <_printf_i+0xa8>
 8002cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cda:	2b15      	cmp	r3, #21
 8002cdc:	d8f6      	bhi.n	8002ccc <_printf_i+0x28>
 8002cde:	a001      	add	r0, pc, #4	; (adr r0, 8002ce4 <_printf_i+0x40>)
 8002ce0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ce4:	08002d3d 	.word	0x08002d3d
 8002ce8:	08002d51 	.word	0x08002d51
 8002cec:	08002ccd 	.word	0x08002ccd
 8002cf0:	08002ccd 	.word	0x08002ccd
 8002cf4:	08002ccd 	.word	0x08002ccd
 8002cf8:	08002ccd 	.word	0x08002ccd
 8002cfc:	08002d51 	.word	0x08002d51
 8002d00:	08002ccd 	.word	0x08002ccd
 8002d04:	08002ccd 	.word	0x08002ccd
 8002d08:	08002ccd 	.word	0x08002ccd
 8002d0c:	08002ccd 	.word	0x08002ccd
 8002d10:	08002e5d 	.word	0x08002e5d
 8002d14:	08002d81 	.word	0x08002d81
 8002d18:	08002e3f 	.word	0x08002e3f
 8002d1c:	08002ccd 	.word	0x08002ccd
 8002d20:	08002ccd 	.word	0x08002ccd
 8002d24:	08002e7f 	.word	0x08002e7f
 8002d28:	08002ccd 	.word	0x08002ccd
 8002d2c:	08002d81 	.word	0x08002d81
 8002d30:	08002ccd 	.word	0x08002ccd
 8002d34:	08002ccd 	.word	0x08002ccd
 8002d38:	08002e47 	.word	0x08002e47
 8002d3c:	680b      	ldr	r3, [r1, #0]
 8002d3e:	1d1a      	adds	r2, r3, #4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	600a      	str	r2, [r1, #0]
 8002d44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0a3      	b.n	8002e98 <_printf_i+0x1f4>
 8002d50:	6825      	ldr	r5, [r4, #0]
 8002d52:	6808      	ldr	r0, [r1, #0]
 8002d54:	062e      	lsls	r6, r5, #24
 8002d56:	f100 0304 	add.w	r3, r0, #4
 8002d5a:	d50a      	bpl.n	8002d72 <_printf_i+0xce>
 8002d5c:	6805      	ldr	r5, [r0, #0]
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	2d00      	cmp	r5, #0
 8002d62:	da03      	bge.n	8002d6c <_printf_i+0xc8>
 8002d64:	232d      	movs	r3, #45	; 0x2d
 8002d66:	426d      	negs	r5, r5
 8002d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d6c:	485e      	ldr	r0, [pc, #376]	; (8002ee8 <_printf_i+0x244>)
 8002d6e:	230a      	movs	r3, #10
 8002d70:	e019      	b.n	8002da6 <_printf_i+0x102>
 8002d72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002d76:	6805      	ldr	r5, [r0, #0]
 8002d78:	600b      	str	r3, [r1, #0]
 8002d7a:	bf18      	it	ne
 8002d7c:	b22d      	sxthne	r5, r5
 8002d7e:	e7ef      	b.n	8002d60 <_printf_i+0xbc>
 8002d80:	680b      	ldr	r3, [r1, #0]
 8002d82:	6825      	ldr	r5, [r4, #0]
 8002d84:	1d18      	adds	r0, r3, #4
 8002d86:	6008      	str	r0, [r1, #0]
 8002d88:	0628      	lsls	r0, r5, #24
 8002d8a:	d501      	bpl.n	8002d90 <_printf_i+0xec>
 8002d8c:	681d      	ldr	r5, [r3, #0]
 8002d8e:	e002      	b.n	8002d96 <_printf_i+0xf2>
 8002d90:	0669      	lsls	r1, r5, #25
 8002d92:	d5fb      	bpl.n	8002d8c <_printf_i+0xe8>
 8002d94:	881d      	ldrh	r5, [r3, #0]
 8002d96:	4854      	ldr	r0, [pc, #336]	; (8002ee8 <_printf_i+0x244>)
 8002d98:	2f6f      	cmp	r7, #111	; 0x6f
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2308      	moveq	r3, #8
 8002d9e:	230a      	movne	r3, #10
 8002da0:	2100      	movs	r1, #0
 8002da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002da6:	6866      	ldr	r6, [r4, #4]
 8002da8:	60a6      	str	r6, [r4, #8]
 8002daa:	2e00      	cmp	r6, #0
 8002dac:	bfa2      	ittt	ge
 8002dae:	6821      	ldrge	r1, [r4, #0]
 8002db0:	f021 0104 	bicge.w	r1, r1, #4
 8002db4:	6021      	strge	r1, [r4, #0]
 8002db6:	b90d      	cbnz	r5, 8002dbc <_printf_i+0x118>
 8002db8:	2e00      	cmp	r6, #0
 8002dba:	d04d      	beq.n	8002e58 <_printf_i+0x1b4>
 8002dbc:	4616      	mov	r6, r2
 8002dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8002dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8002dc6:	5dc7      	ldrb	r7, [r0, r7]
 8002dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002dcc:	462f      	mov	r7, r5
 8002dce:	42bb      	cmp	r3, r7
 8002dd0:	460d      	mov	r5, r1
 8002dd2:	d9f4      	bls.n	8002dbe <_printf_i+0x11a>
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d10b      	bne.n	8002df0 <_printf_i+0x14c>
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	07df      	lsls	r7, r3, #31
 8002ddc:	d508      	bpl.n	8002df0 <_printf_i+0x14c>
 8002dde:	6923      	ldr	r3, [r4, #16]
 8002de0:	6861      	ldr	r1, [r4, #4]
 8002de2:	4299      	cmp	r1, r3
 8002de4:	bfde      	ittt	le
 8002de6:	2330      	movle	r3, #48	; 0x30
 8002de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002dec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002df0:	1b92      	subs	r2, r2, r6
 8002df2:	6122      	str	r2, [r4, #16]
 8002df4:	f8cd a000 	str.w	sl, [sp]
 8002df8:	464b      	mov	r3, r9
 8002dfa:	aa03      	add	r2, sp, #12
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	4640      	mov	r0, r8
 8002e00:	f7ff fee2 	bl	8002bc8 <_printf_common>
 8002e04:	3001      	adds	r0, #1
 8002e06:	d14c      	bne.n	8002ea2 <_printf_i+0x1fe>
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e0c:	b004      	add	sp, #16
 8002e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e12:	4835      	ldr	r0, [pc, #212]	; (8002ee8 <_printf_i+0x244>)
 8002e14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	680e      	ldr	r6, [r1, #0]
 8002e1c:	061f      	lsls	r7, r3, #24
 8002e1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002e22:	600e      	str	r6, [r1, #0]
 8002e24:	d514      	bpl.n	8002e50 <_printf_i+0x1ac>
 8002e26:	07d9      	lsls	r1, r3, #31
 8002e28:	bf44      	itt	mi
 8002e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8002e2e:	6023      	strmi	r3, [r4, #0]
 8002e30:	b91d      	cbnz	r5, 8002e3a <_printf_i+0x196>
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	f023 0320 	bic.w	r3, r3, #32
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	2310      	movs	r3, #16
 8002e3c:	e7b0      	b.n	8002da0 <_printf_i+0xfc>
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	f043 0320 	orr.w	r3, r3, #32
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	2378      	movs	r3, #120	; 0x78
 8002e48:	4828      	ldr	r0, [pc, #160]	; (8002eec <_printf_i+0x248>)
 8002e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e4e:	e7e3      	b.n	8002e18 <_printf_i+0x174>
 8002e50:	065e      	lsls	r6, r3, #25
 8002e52:	bf48      	it	mi
 8002e54:	b2ad      	uxthmi	r5, r5
 8002e56:	e7e6      	b.n	8002e26 <_printf_i+0x182>
 8002e58:	4616      	mov	r6, r2
 8002e5a:	e7bb      	b.n	8002dd4 <_printf_i+0x130>
 8002e5c:	680b      	ldr	r3, [r1, #0]
 8002e5e:	6826      	ldr	r6, [r4, #0]
 8002e60:	6960      	ldr	r0, [r4, #20]
 8002e62:	1d1d      	adds	r5, r3, #4
 8002e64:	600d      	str	r5, [r1, #0]
 8002e66:	0635      	lsls	r5, r6, #24
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	d501      	bpl.n	8002e70 <_printf_i+0x1cc>
 8002e6c:	6018      	str	r0, [r3, #0]
 8002e6e:	e002      	b.n	8002e76 <_printf_i+0x1d2>
 8002e70:	0671      	lsls	r1, r6, #25
 8002e72:	d5fb      	bpl.n	8002e6c <_printf_i+0x1c8>
 8002e74:	8018      	strh	r0, [r3, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	6123      	str	r3, [r4, #16]
 8002e7a:	4616      	mov	r6, r2
 8002e7c:	e7ba      	b.n	8002df4 <_printf_i+0x150>
 8002e7e:	680b      	ldr	r3, [r1, #0]
 8002e80:	1d1a      	adds	r2, r3, #4
 8002e82:	600a      	str	r2, [r1, #0]
 8002e84:	681e      	ldr	r6, [r3, #0]
 8002e86:	6862      	ldr	r2, [r4, #4]
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f7fd f9b8 	bl	8000200 <memchr>
 8002e90:	b108      	cbz	r0, 8002e96 <_printf_i+0x1f2>
 8002e92:	1b80      	subs	r0, r0, r6
 8002e94:	6060      	str	r0, [r4, #4]
 8002e96:	6863      	ldr	r3, [r4, #4]
 8002e98:	6123      	str	r3, [r4, #16]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ea0:	e7a8      	b.n	8002df4 <_printf_i+0x150>
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	4632      	mov	r2, r6
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	4640      	mov	r0, r8
 8002eaa:	47d0      	blx	sl
 8002eac:	3001      	adds	r0, #1
 8002eae:	d0ab      	beq.n	8002e08 <_printf_i+0x164>
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	079b      	lsls	r3, r3, #30
 8002eb4:	d413      	bmi.n	8002ede <_printf_i+0x23a>
 8002eb6:	68e0      	ldr	r0, [r4, #12]
 8002eb8:	9b03      	ldr	r3, [sp, #12]
 8002eba:	4298      	cmp	r0, r3
 8002ebc:	bfb8      	it	lt
 8002ebe:	4618      	movlt	r0, r3
 8002ec0:	e7a4      	b.n	8002e0c <_printf_i+0x168>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	4632      	mov	r2, r6
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	4640      	mov	r0, r8
 8002eca:	47d0      	blx	sl
 8002ecc:	3001      	adds	r0, #1
 8002ece:	d09b      	beq.n	8002e08 <_printf_i+0x164>
 8002ed0:	3501      	adds	r5, #1
 8002ed2:	68e3      	ldr	r3, [r4, #12]
 8002ed4:	9903      	ldr	r1, [sp, #12]
 8002ed6:	1a5b      	subs	r3, r3, r1
 8002ed8:	42ab      	cmp	r3, r5
 8002eda:	dcf2      	bgt.n	8002ec2 <_printf_i+0x21e>
 8002edc:	e7eb      	b.n	8002eb6 <_printf_i+0x212>
 8002ede:	2500      	movs	r5, #0
 8002ee0:	f104 0619 	add.w	r6, r4, #25
 8002ee4:	e7f5      	b.n	8002ed2 <_printf_i+0x22e>
 8002ee6:	bf00      	nop
 8002ee8:	080036e1 	.word	0x080036e1
 8002eec:	080036f2 	.word	0x080036f2

08002ef0 <_sbrk_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4d06      	ldr	r5, [pc, #24]	; (8002f0c <_sbrk_r+0x1c>)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	4608      	mov	r0, r1
 8002efa:	602b      	str	r3, [r5, #0]
 8002efc:	f7fd ff80 	bl	8000e00 <_sbrk>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d102      	bne.n	8002f0a <_sbrk_r+0x1a>
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	b103      	cbz	r3, 8002f0a <_sbrk_r+0x1a>
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	bd38      	pop	{r3, r4, r5, pc}
 8002f0c:	20000134 	.word	0x20000134

08002f10 <__sread>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	460c      	mov	r4, r1
 8002f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f18:	f000 fab4 	bl	8003484 <_read_r>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	bfab      	itete	ge
 8002f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002f22:	89a3      	ldrhlt	r3, [r4, #12]
 8002f24:	181b      	addge	r3, r3, r0
 8002f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002f2a:	bfac      	ite	ge
 8002f2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002f2e:	81a3      	strhlt	r3, [r4, #12]
 8002f30:	bd10      	pop	{r4, pc}

08002f32 <__swrite>:
 8002f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f36:	461f      	mov	r7, r3
 8002f38:	898b      	ldrh	r3, [r1, #12]
 8002f3a:	05db      	lsls	r3, r3, #23
 8002f3c:	4605      	mov	r5, r0
 8002f3e:	460c      	mov	r4, r1
 8002f40:	4616      	mov	r6, r2
 8002f42:	d505      	bpl.n	8002f50 <__swrite+0x1e>
 8002f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f48:	2302      	movs	r3, #2
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f000 f9c8 	bl	80032e0 <_lseek_r>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f5a:	81a3      	strh	r3, [r4, #12]
 8002f5c:	4632      	mov	r2, r6
 8002f5e:	463b      	mov	r3, r7
 8002f60:	4628      	mov	r0, r5
 8002f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f66:	f000 b869 	b.w	800303c <_write_r>

08002f6a <__sseek>:
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f72:	f000 f9b5 	bl	80032e0 <_lseek_r>
 8002f76:	1c43      	adds	r3, r0, #1
 8002f78:	89a3      	ldrh	r3, [r4, #12]
 8002f7a:	bf15      	itete	ne
 8002f7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f86:	81a3      	strheq	r3, [r4, #12]
 8002f88:	bf18      	it	ne
 8002f8a:	81a3      	strhne	r3, [r4, #12]
 8002f8c:	bd10      	pop	{r4, pc}

08002f8e <__sclose>:
 8002f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f92:	f000 b8d3 	b.w	800313c <_close_r>
	...

08002f98 <__swbuf_r>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	460e      	mov	r6, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	b118      	cbz	r0, 8002faa <__swbuf_r+0x12>
 8002fa2:	6983      	ldr	r3, [r0, #24]
 8002fa4:	b90b      	cbnz	r3, 8002faa <__swbuf_r+0x12>
 8002fa6:	f7ff fbbb 	bl	8002720 <__sinit>
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <__swbuf_r+0x98>)
 8002fac:	429c      	cmp	r4, r3
 8002fae:	d12b      	bne.n	8003008 <__swbuf_r+0x70>
 8002fb0:	686c      	ldr	r4, [r5, #4]
 8002fb2:	69a3      	ldr	r3, [r4, #24]
 8002fb4:	60a3      	str	r3, [r4, #8]
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	071a      	lsls	r2, r3, #28
 8002fba:	d52f      	bpl.n	800301c <__swbuf_r+0x84>
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	b36b      	cbz	r3, 800301c <__swbuf_r+0x84>
 8002fc0:	6923      	ldr	r3, [r4, #16]
 8002fc2:	6820      	ldr	r0, [r4, #0]
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	6963      	ldr	r3, [r4, #20]
 8002fc8:	b2f6      	uxtb	r6, r6
 8002fca:	4283      	cmp	r3, r0
 8002fcc:	4637      	mov	r7, r6
 8002fce:	dc04      	bgt.n	8002fda <__swbuf_r+0x42>
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 f948 	bl	8003268 <_fflush_r>
 8002fd8:	bb30      	cbnz	r0, 8003028 <__swbuf_r+0x90>
 8002fda:	68a3      	ldr	r3, [r4, #8]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60a3      	str	r3, [r4, #8]
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	6022      	str	r2, [r4, #0]
 8002fe6:	701e      	strb	r6, [r3, #0]
 8002fe8:	6963      	ldr	r3, [r4, #20]
 8002fea:	3001      	adds	r0, #1
 8002fec:	4283      	cmp	r3, r0
 8002fee:	d004      	beq.n	8002ffa <__swbuf_r+0x62>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	07db      	lsls	r3, r3, #31
 8002ff4:	d506      	bpl.n	8003004 <__swbuf_r+0x6c>
 8002ff6:	2e0a      	cmp	r6, #10
 8002ff8:	d104      	bne.n	8003004 <__swbuf_r+0x6c>
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f000 f933 	bl	8003268 <_fflush_r>
 8003002:	b988      	cbnz	r0, 8003028 <__swbuf_r+0x90>
 8003004:	4638      	mov	r0, r7
 8003006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <__swbuf_r+0x9c>)
 800300a:	429c      	cmp	r4, r3
 800300c:	d101      	bne.n	8003012 <__swbuf_r+0x7a>
 800300e:	68ac      	ldr	r4, [r5, #8]
 8003010:	e7cf      	b.n	8002fb2 <__swbuf_r+0x1a>
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <__swbuf_r+0xa0>)
 8003014:	429c      	cmp	r4, r3
 8003016:	bf08      	it	eq
 8003018:	68ec      	ldreq	r4, [r5, #12]
 800301a:	e7ca      	b.n	8002fb2 <__swbuf_r+0x1a>
 800301c:	4621      	mov	r1, r4
 800301e:	4628      	mov	r0, r5
 8003020:	f000 f81e 	bl	8003060 <__swsetup_r>
 8003024:	2800      	cmp	r0, #0
 8003026:	d0cb      	beq.n	8002fc0 <__swbuf_r+0x28>
 8003028:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800302c:	e7ea      	b.n	8003004 <__swbuf_r+0x6c>
 800302e:	bf00      	nop
 8003030:	08003690 	.word	0x08003690
 8003034:	080036b0 	.word	0x080036b0
 8003038:	08003670 	.word	0x08003670

0800303c <_write_r>:
 800303c:	b538      	push	{r3, r4, r5, lr}
 800303e:	4d07      	ldr	r5, [pc, #28]	; (800305c <_write_r+0x20>)
 8003040:	4604      	mov	r4, r0
 8003042:	4608      	mov	r0, r1
 8003044:	4611      	mov	r1, r2
 8003046:	2200      	movs	r2, #0
 8003048:	602a      	str	r2, [r5, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f7fd fe87 	bl	8000d5e <_write>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d102      	bne.n	800305a <_write_r+0x1e>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	b103      	cbz	r3, 800305a <_write_r+0x1e>
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	bd38      	pop	{r3, r4, r5, pc}
 800305c:	20000134 	.word	0x20000134

08003060 <__swsetup_r>:
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <__swsetup_r+0xcc>)
 8003062:	b570      	push	{r4, r5, r6, lr}
 8003064:	681d      	ldr	r5, [r3, #0]
 8003066:	4606      	mov	r6, r0
 8003068:	460c      	mov	r4, r1
 800306a:	b125      	cbz	r5, 8003076 <__swsetup_r+0x16>
 800306c:	69ab      	ldr	r3, [r5, #24]
 800306e:	b913      	cbnz	r3, 8003076 <__swsetup_r+0x16>
 8003070:	4628      	mov	r0, r5
 8003072:	f7ff fb55 	bl	8002720 <__sinit>
 8003076:	4b2e      	ldr	r3, [pc, #184]	; (8003130 <__swsetup_r+0xd0>)
 8003078:	429c      	cmp	r4, r3
 800307a:	d10f      	bne.n	800309c <__swsetup_r+0x3c>
 800307c:	686c      	ldr	r4, [r5, #4]
 800307e:	89a3      	ldrh	r3, [r4, #12]
 8003080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003084:	0719      	lsls	r1, r3, #28
 8003086:	d42c      	bmi.n	80030e2 <__swsetup_r+0x82>
 8003088:	06dd      	lsls	r5, r3, #27
 800308a:	d411      	bmi.n	80030b0 <__swsetup_r+0x50>
 800308c:	2309      	movs	r3, #9
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003094:	81a3      	strh	r3, [r4, #12]
 8003096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800309a:	e03e      	b.n	800311a <__swsetup_r+0xba>
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <__swsetup_r+0xd4>)
 800309e:	429c      	cmp	r4, r3
 80030a0:	d101      	bne.n	80030a6 <__swsetup_r+0x46>
 80030a2:	68ac      	ldr	r4, [r5, #8]
 80030a4:	e7eb      	b.n	800307e <__swsetup_r+0x1e>
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <__swsetup_r+0xd8>)
 80030a8:	429c      	cmp	r4, r3
 80030aa:	bf08      	it	eq
 80030ac:	68ec      	ldreq	r4, [r5, #12]
 80030ae:	e7e6      	b.n	800307e <__swsetup_r+0x1e>
 80030b0:	0758      	lsls	r0, r3, #29
 80030b2:	d512      	bpl.n	80030da <__swsetup_r+0x7a>
 80030b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030b6:	b141      	cbz	r1, 80030ca <__swsetup_r+0x6a>
 80030b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030bc:	4299      	cmp	r1, r3
 80030be:	d002      	beq.n	80030c6 <__swsetup_r+0x66>
 80030c0:	4630      	mov	r0, r6
 80030c2:	f000 f98f 	bl	80033e4 <_free_r>
 80030c6:	2300      	movs	r3, #0
 80030c8:	6363      	str	r3, [r4, #52]	; 0x34
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030d0:	81a3      	strh	r3, [r4, #12]
 80030d2:	2300      	movs	r3, #0
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	6923      	ldr	r3, [r4, #16]
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	81a3      	strh	r3, [r4, #12]
 80030e2:	6923      	ldr	r3, [r4, #16]
 80030e4:	b94b      	cbnz	r3, 80030fa <__swsetup_r+0x9a>
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f0:	d003      	beq.n	80030fa <__swsetup_r+0x9a>
 80030f2:	4621      	mov	r1, r4
 80030f4:	4630      	mov	r0, r6
 80030f6:	f000 f929 	bl	800334c <__smakebuf_r>
 80030fa:	89a0      	ldrh	r0, [r4, #12]
 80030fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003100:	f010 0301 	ands.w	r3, r0, #1
 8003104:	d00a      	beq.n	800311c <__swsetup_r+0xbc>
 8003106:	2300      	movs	r3, #0
 8003108:	60a3      	str	r3, [r4, #8]
 800310a:	6963      	ldr	r3, [r4, #20]
 800310c:	425b      	negs	r3, r3
 800310e:	61a3      	str	r3, [r4, #24]
 8003110:	6923      	ldr	r3, [r4, #16]
 8003112:	b943      	cbnz	r3, 8003126 <__swsetup_r+0xc6>
 8003114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003118:	d1ba      	bne.n	8003090 <__swsetup_r+0x30>
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	0781      	lsls	r1, r0, #30
 800311e:	bf58      	it	pl
 8003120:	6963      	ldrpl	r3, [r4, #20]
 8003122:	60a3      	str	r3, [r4, #8]
 8003124:	e7f4      	b.n	8003110 <__swsetup_r+0xb0>
 8003126:	2000      	movs	r0, #0
 8003128:	e7f7      	b.n	800311a <__swsetup_r+0xba>
 800312a:	bf00      	nop
 800312c:	2000001c 	.word	0x2000001c
 8003130:	08003690 	.word	0x08003690
 8003134:	080036b0 	.word	0x080036b0
 8003138:	08003670 	.word	0x08003670

0800313c <_close_r>:
 800313c:	b538      	push	{r3, r4, r5, lr}
 800313e:	4d06      	ldr	r5, [pc, #24]	; (8003158 <_close_r+0x1c>)
 8003140:	2300      	movs	r3, #0
 8003142:	4604      	mov	r4, r0
 8003144:	4608      	mov	r0, r1
 8003146:	602b      	str	r3, [r5, #0]
 8003148:	f7fd fe25 	bl	8000d96 <_close>
 800314c:	1c43      	adds	r3, r0, #1
 800314e:	d102      	bne.n	8003156 <_close_r+0x1a>
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	b103      	cbz	r3, 8003156 <_close_r+0x1a>
 8003154:	6023      	str	r3, [r4, #0]
 8003156:	bd38      	pop	{r3, r4, r5, pc}
 8003158:	20000134 	.word	0x20000134

0800315c <__sflush_r>:
 800315c:	898a      	ldrh	r2, [r1, #12]
 800315e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003162:	4605      	mov	r5, r0
 8003164:	0710      	lsls	r0, r2, #28
 8003166:	460c      	mov	r4, r1
 8003168:	d458      	bmi.n	800321c <__sflush_r+0xc0>
 800316a:	684b      	ldr	r3, [r1, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	dc05      	bgt.n	800317c <__sflush_r+0x20>
 8003170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	dc02      	bgt.n	800317c <__sflush_r+0x20>
 8003176:	2000      	movs	r0, #0
 8003178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800317c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800317e:	2e00      	cmp	r6, #0
 8003180:	d0f9      	beq.n	8003176 <__sflush_r+0x1a>
 8003182:	2300      	movs	r3, #0
 8003184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003188:	682f      	ldr	r7, [r5, #0]
 800318a:	602b      	str	r3, [r5, #0]
 800318c:	d032      	beq.n	80031f4 <__sflush_r+0x98>
 800318e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	075a      	lsls	r2, r3, #29
 8003194:	d505      	bpl.n	80031a2 <__sflush_r+0x46>
 8003196:	6863      	ldr	r3, [r4, #4]
 8003198:	1ac0      	subs	r0, r0, r3
 800319a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800319c:	b10b      	cbz	r3, 80031a2 <__sflush_r+0x46>
 800319e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031a0:	1ac0      	subs	r0, r0, r3
 80031a2:	2300      	movs	r3, #0
 80031a4:	4602      	mov	r2, r0
 80031a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031a8:	6a21      	ldr	r1, [r4, #32]
 80031aa:	4628      	mov	r0, r5
 80031ac:	47b0      	blx	r6
 80031ae:	1c43      	adds	r3, r0, #1
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	d106      	bne.n	80031c2 <__sflush_r+0x66>
 80031b4:	6829      	ldr	r1, [r5, #0]
 80031b6:	291d      	cmp	r1, #29
 80031b8:	d82c      	bhi.n	8003214 <__sflush_r+0xb8>
 80031ba:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <__sflush_r+0x108>)
 80031bc:	40ca      	lsrs	r2, r1
 80031be:	07d6      	lsls	r6, r2, #31
 80031c0:	d528      	bpl.n	8003214 <__sflush_r+0xb8>
 80031c2:	2200      	movs	r2, #0
 80031c4:	6062      	str	r2, [r4, #4]
 80031c6:	04d9      	lsls	r1, r3, #19
 80031c8:	6922      	ldr	r2, [r4, #16]
 80031ca:	6022      	str	r2, [r4, #0]
 80031cc:	d504      	bpl.n	80031d8 <__sflush_r+0x7c>
 80031ce:	1c42      	adds	r2, r0, #1
 80031d0:	d101      	bne.n	80031d6 <__sflush_r+0x7a>
 80031d2:	682b      	ldr	r3, [r5, #0]
 80031d4:	b903      	cbnz	r3, 80031d8 <__sflush_r+0x7c>
 80031d6:	6560      	str	r0, [r4, #84]	; 0x54
 80031d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031da:	602f      	str	r7, [r5, #0]
 80031dc:	2900      	cmp	r1, #0
 80031de:	d0ca      	beq.n	8003176 <__sflush_r+0x1a>
 80031e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031e4:	4299      	cmp	r1, r3
 80031e6:	d002      	beq.n	80031ee <__sflush_r+0x92>
 80031e8:	4628      	mov	r0, r5
 80031ea:	f000 f8fb 	bl	80033e4 <_free_r>
 80031ee:	2000      	movs	r0, #0
 80031f0:	6360      	str	r0, [r4, #52]	; 0x34
 80031f2:	e7c1      	b.n	8003178 <__sflush_r+0x1c>
 80031f4:	6a21      	ldr	r1, [r4, #32]
 80031f6:	2301      	movs	r3, #1
 80031f8:	4628      	mov	r0, r5
 80031fa:	47b0      	blx	r6
 80031fc:	1c41      	adds	r1, r0, #1
 80031fe:	d1c7      	bne.n	8003190 <__sflush_r+0x34>
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0c4      	beq.n	8003190 <__sflush_r+0x34>
 8003206:	2b1d      	cmp	r3, #29
 8003208:	d001      	beq.n	800320e <__sflush_r+0xb2>
 800320a:	2b16      	cmp	r3, #22
 800320c:	d101      	bne.n	8003212 <__sflush_r+0xb6>
 800320e:	602f      	str	r7, [r5, #0]
 8003210:	e7b1      	b.n	8003176 <__sflush_r+0x1a>
 8003212:	89a3      	ldrh	r3, [r4, #12]
 8003214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003218:	81a3      	strh	r3, [r4, #12]
 800321a:	e7ad      	b.n	8003178 <__sflush_r+0x1c>
 800321c:	690f      	ldr	r7, [r1, #16]
 800321e:	2f00      	cmp	r7, #0
 8003220:	d0a9      	beq.n	8003176 <__sflush_r+0x1a>
 8003222:	0793      	lsls	r3, r2, #30
 8003224:	680e      	ldr	r6, [r1, #0]
 8003226:	bf08      	it	eq
 8003228:	694b      	ldreq	r3, [r1, #20]
 800322a:	600f      	str	r7, [r1, #0]
 800322c:	bf18      	it	ne
 800322e:	2300      	movne	r3, #0
 8003230:	eba6 0807 	sub.w	r8, r6, r7
 8003234:	608b      	str	r3, [r1, #8]
 8003236:	f1b8 0f00 	cmp.w	r8, #0
 800323a:	dd9c      	ble.n	8003176 <__sflush_r+0x1a>
 800323c:	6a21      	ldr	r1, [r4, #32]
 800323e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003240:	4643      	mov	r3, r8
 8003242:	463a      	mov	r2, r7
 8003244:	4628      	mov	r0, r5
 8003246:	47b0      	blx	r6
 8003248:	2800      	cmp	r0, #0
 800324a:	dc06      	bgt.n	800325a <__sflush_r+0xfe>
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003252:	81a3      	strh	r3, [r4, #12]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003258:	e78e      	b.n	8003178 <__sflush_r+0x1c>
 800325a:	4407      	add	r7, r0
 800325c:	eba8 0800 	sub.w	r8, r8, r0
 8003260:	e7e9      	b.n	8003236 <__sflush_r+0xda>
 8003262:	bf00      	nop
 8003264:	20400001 	.word	0x20400001

08003268 <_fflush_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	690b      	ldr	r3, [r1, #16]
 800326c:	4605      	mov	r5, r0
 800326e:	460c      	mov	r4, r1
 8003270:	b913      	cbnz	r3, 8003278 <_fflush_r+0x10>
 8003272:	2500      	movs	r5, #0
 8003274:	4628      	mov	r0, r5
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	b118      	cbz	r0, 8003282 <_fflush_r+0x1a>
 800327a:	6983      	ldr	r3, [r0, #24]
 800327c:	b90b      	cbnz	r3, 8003282 <_fflush_r+0x1a>
 800327e:	f7ff fa4f 	bl	8002720 <__sinit>
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <_fflush_r+0x6c>)
 8003284:	429c      	cmp	r4, r3
 8003286:	d11b      	bne.n	80032c0 <_fflush_r+0x58>
 8003288:	686c      	ldr	r4, [r5, #4]
 800328a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ef      	beq.n	8003272 <_fflush_r+0xa>
 8003292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003294:	07d0      	lsls	r0, r2, #31
 8003296:	d404      	bmi.n	80032a2 <_fflush_r+0x3a>
 8003298:	0599      	lsls	r1, r3, #22
 800329a:	d402      	bmi.n	80032a2 <_fflush_r+0x3a>
 800329c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800329e:	f7ff fadd 	bl	800285c <__retarget_lock_acquire_recursive>
 80032a2:	4628      	mov	r0, r5
 80032a4:	4621      	mov	r1, r4
 80032a6:	f7ff ff59 	bl	800315c <__sflush_r>
 80032aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032ac:	07da      	lsls	r2, r3, #31
 80032ae:	4605      	mov	r5, r0
 80032b0:	d4e0      	bmi.n	8003274 <_fflush_r+0xc>
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	059b      	lsls	r3, r3, #22
 80032b6:	d4dd      	bmi.n	8003274 <_fflush_r+0xc>
 80032b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ba:	f7ff fad0 	bl	800285e <__retarget_lock_release_recursive>
 80032be:	e7d9      	b.n	8003274 <_fflush_r+0xc>
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <_fflush_r+0x70>)
 80032c2:	429c      	cmp	r4, r3
 80032c4:	d101      	bne.n	80032ca <_fflush_r+0x62>
 80032c6:	68ac      	ldr	r4, [r5, #8]
 80032c8:	e7df      	b.n	800328a <_fflush_r+0x22>
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <_fflush_r+0x74>)
 80032cc:	429c      	cmp	r4, r3
 80032ce:	bf08      	it	eq
 80032d0:	68ec      	ldreq	r4, [r5, #12]
 80032d2:	e7da      	b.n	800328a <_fflush_r+0x22>
 80032d4:	08003690 	.word	0x08003690
 80032d8:	080036b0 	.word	0x080036b0
 80032dc:	08003670 	.word	0x08003670

080032e0 <_lseek_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4d07      	ldr	r5, [pc, #28]	; (8003300 <_lseek_r+0x20>)
 80032e4:	4604      	mov	r4, r0
 80032e6:	4608      	mov	r0, r1
 80032e8:	4611      	mov	r1, r2
 80032ea:	2200      	movs	r2, #0
 80032ec:	602a      	str	r2, [r5, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f7fd fd78 	bl	8000de4 <_lseek>
 80032f4:	1c43      	adds	r3, r0, #1
 80032f6:	d102      	bne.n	80032fe <_lseek_r+0x1e>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	b103      	cbz	r3, 80032fe <_lseek_r+0x1e>
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
 8003300:	20000134 	.word	0x20000134

08003304 <__swhatbuf_r>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	460e      	mov	r6, r1
 8003308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800330c:	2900      	cmp	r1, #0
 800330e:	b096      	sub	sp, #88	; 0x58
 8003310:	4614      	mov	r4, r2
 8003312:	461d      	mov	r5, r3
 8003314:	da07      	bge.n	8003326 <__swhatbuf_r+0x22>
 8003316:	2300      	movs	r3, #0
 8003318:	602b      	str	r3, [r5, #0]
 800331a:	89b3      	ldrh	r3, [r6, #12]
 800331c:	061a      	lsls	r2, r3, #24
 800331e:	d410      	bmi.n	8003342 <__swhatbuf_r+0x3e>
 8003320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003324:	e00e      	b.n	8003344 <__swhatbuf_r+0x40>
 8003326:	466a      	mov	r2, sp
 8003328:	f000 f8be 	bl	80034a8 <_fstat_r>
 800332c:	2800      	cmp	r0, #0
 800332e:	dbf2      	blt.n	8003316 <__swhatbuf_r+0x12>
 8003330:	9a01      	ldr	r2, [sp, #4]
 8003332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800333a:	425a      	negs	r2, r3
 800333c:	415a      	adcs	r2, r3
 800333e:	602a      	str	r2, [r5, #0]
 8003340:	e7ee      	b.n	8003320 <__swhatbuf_r+0x1c>
 8003342:	2340      	movs	r3, #64	; 0x40
 8003344:	2000      	movs	r0, #0
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	b016      	add	sp, #88	; 0x58
 800334a:	bd70      	pop	{r4, r5, r6, pc}

0800334c <__smakebuf_r>:
 800334c:	898b      	ldrh	r3, [r1, #12]
 800334e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003350:	079d      	lsls	r5, r3, #30
 8003352:	4606      	mov	r6, r0
 8003354:	460c      	mov	r4, r1
 8003356:	d507      	bpl.n	8003368 <__smakebuf_r+0x1c>
 8003358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	6123      	str	r3, [r4, #16]
 8003360:	2301      	movs	r3, #1
 8003362:	6163      	str	r3, [r4, #20]
 8003364:	b002      	add	sp, #8
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	ab01      	add	r3, sp, #4
 800336a:	466a      	mov	r2, sp
 800336c:	f7ff ffca 	bl	8003304 <__swhatbuf_r>
 8003370:	9900      	ldr	r1, [sp, #0]
 8003372:	4605      	mov	r5, r0
 8003374:	4630      	mov	r0, r6
 8003376:	f7ff fa73 	bl	8002860 <_malloc_r>
 800337a:	b948      	cbnz	r0, 8003390 <__smakebuf_r+0x44>
 800337c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003380:	059a      	lsls	r2, r3, #22
 8003382:	d4ef      	bmi.n	8003364 <__smakebuf_r+0x18>
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	e7e3      	b.n	8003358 <__smakebuf_r+0xc>
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <__smakebuf_r+0x7c>)
 8003392:	62b3      	str	r3, [r6, #40]	; 0x28
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	6020      	str	r0, [r4, #0]
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	81a3      	strh	r3, [r4, #12]
 800339e:	9b00      	ldr	r3, [sp, #0]
 80033a0:	6163      	str	r3, [r4, #20]
 80033a2:	9b01      	ldr	r3, [sp, #4]
 80033a4:	6120      	str	r0, [r4, #16]
 80033a6:	b15b      	cbz	r3, 80033c0 <__smakebuf_r+0x74>
 80033a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ac:	4630      	mov	r0, r6
 80033ae:	f000 f88d 	bl	80034cc <_isatty_r>
 80033b2:	b128      	cbz	r0, 80033c0 <__smakebuf_r+0x74>
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	89a0      	ldrh	r0, [r4, #12]
 80033c2:	4305      	orrs	r5, r0
 80033c4:	81a5      	strh	r5, [r4, #12]
 80033c6:	e7cd      	b.n	8003364 <__smakebuf_r+0x18>
 80033c8:	080026b9 	.word	0x080026b9

080033cc <__malloc_lock>:
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <__malloc_lock+0x8>)
 80033ce:	f7ff ba45 	b.w	800285c <__retarget_lock_acquire_recursive>
 80033d2:	bf00      	nop
 80033d4:	2000012c 	.word	0x2000012c

080033d8 <__malloc_unlock>:
 80033d8:	4801      	ldr	r0, [pc, #4]	; (80033e0 <__malloc_unlock+0x8>)
 80033da:	f7ff ba40 	b.w	800285e <__retarget_lock_release_recursive>
 80033de:	bf00      	nop
 80033e0:	2000012c 	.word	0x2000012c

080033e4 <_free_r>:
 80033e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033e6:	2900      	cmp	r1, #0
 80033e8:	d048      	beq.n	800347c <_free_r+0x98>
 80033ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ee:	9001      	str	r0, [sp, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f1a1 0404 	sub.w	r4, r1, #4
 80033f6:	bfb8      	it	lt
 80033f8:	18e4      	addlt	r4, r4, r3
 80033fa:	f7ff ffe7 	bl	80033cc <__malloc_lock>
 80033fe:	4a20      	ldr	r2, [pc, #128]	; (8003480 <_free_r+0x9c>)
 8003400:	9801      	ldr	r0, [sp, #4]
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	4615      	mov	r5, r2
 8003406:	b933      	cbnz	r3, 8003416 <_free_r+0x32>
 8003408:	6063      	str	r3, [r4, #4]
 800340a:	6014      	str	r4, [r2, #0]
 800340c:	b003      	add	sp, #12
 800340e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003412:	f7ff bfe1 	b.w	80033d8 <__malloc_unlock>
 8003416:	42a3      	cmp	r3, r4
 8003418:	d90b      	bls.n	8003432 <_free_r+0x4e>
 800341a:	6821      	ldr	r1, [r4, #0]
 800341c:	1862      	adds	r2, r4, r1
 800341e:	4293      	cmp	r3, r2
 8003420:	bf04      	itt	eq
 8003422:	681a      	ldreq	r2, [r3, #0]
 8003424:	685b      	ldreq	r3, [r3, #4]
 8003426:	6063      	str	r3, [r4, #4]
 8003428:	bf04      	itt	eq
 800342a:	1852      	addeq	r2, r2, r1
 800342c:	6022      	streq	r2, [r4, #0]
 800342e:	602c      	str	r4, [r5, #0]
 8003430:	e7ec      	b.n	800340c <_free_r+0x28>
 8003432:	461a      	mov	r2, r3
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	b10b      	cbz	r3, 800343c <_free_r+0x58>
 8003438:	42a3      	cmp	r3, r4
 800343a:	d9fa      	bls.n	8003432 <_free_r+0x4e>
 800343c:	6811      	ldr	r1, [r2, #0]
 800343e:	1855      	adds	r5, r2, r1
 8003440:	42a5      	cmp	r5, r4
 8003442:	d10b      	bne.n	800345c <_free_r+0x78>
 8003444:	6824      	ldr	r4, [r4, #0]
 8003446:	4421      	add	r1, r4
 8003448:	1854      	adds	r4, r2, r1
 800344a:	42a3      	cmp	r3, r4
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	d1dd      	bne.n	800340c <_free_r+0x28>
 8003450:	681c      	ldr	r4, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	6053      	str	r3, [r2, #4]
 8003456:	4421      	add	r1, r4
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	e7d7      	b.n	800340c <_free_r+0x28>
 800345c:	d902      	bls.n	8003464 <_free_r+0x80>
 800345e:	230c      	movs	r3, #12
 8003460:	6003      	str	r3, [r0, #0]
 8003462:	e7d3      	b.n	800340c <_free_r+0x28>
 8003464:	6825      	ldr	r5, [r4, #0]
 8003466:	1961      	adds	r1, r4, r5
 8003468:	428b      	cmp	r3, r1
 800346a:	bf04      	itt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	bf04      	itt	eq
 8003474:	1949      	addeq	r1, r1, r5
 8003476:	6021      	streq	r1, [r4, #0]
 8003478:	6054      	str	r4, [r2, #4]
 800347a:	e7c7      	b.n	800340c <_free_r+0x28>
 800347c:	b003      	add	sp, #12
 800347e:	bd30      	pop	{r4, r5, pc}
 8003480:	200000d8 	.word	0x200000d8

08003484 <_read_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4d07      	ldr	r5, [pc, #28]	; (80034a4 <_read_r+0x20>)
 8003488:	4604      	mov	r4, r0
 800348a:	4608      	mov	r0, r1
 800348c:	4611      	mov	r1, r2
 800348e:	2200      	movs	r2, #0
 8003490:	602a      	str	r2, [r5, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	f7fd fc46 	bl	8000d24 <_read>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d102      	bne.n	80034a2 <_read_r+0x1e>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	b103      	cbz	r3, 80034a2 <_read_r+0x1e>
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	20000134 	.word	0x20000134

080034a8 <_fstat_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4d07      	ldr	r5, [pc, #28]	; (80034c8 <_fstat_r+0x20>)
 80034ac:	2300      	movs	r3, #0
 80034ae:	4604      	mov	r4, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	602b      	str	r3, [r5, #0]
 80034b6:	f7fd fc7a 	bl	8000dae <_fstat>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	d102      	bne.n	80034c4 <_fstat_r+0x1c>
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	b103      	cbz	r3, 80034c4 <_fstat_r+0x1c>
 80034c2:	6023      	str	r3, [r4, #0]
 80034c4:	bd38      	pop	{r3, r4, r5, pc}
 80034c6:	bf00      	nop
 80034c8:	20000134 	.word	0x20000134

080034cc <_isatty_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	4d06      	ldr	r5, [pc, #24]	; (80034e8 <_isatty_r+0x1c>)
 80034d0:	2300      	movs	r3, #0
 80034d2:	4604      	mov	r4, r0
 80034d4:	4608      	mov	r0, r1
 80034d6:	602b      	str	r3, [r5, #0]
 80034d8:	f7fd fc79 	bl	8000dce <_isatty>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d102      	bne.n	80034e6 <_isatty_r+0x1a>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b103      	cbz	r3, 80034e6 <_isatty_r+0x1a>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	20000134 	.word	0x20000134

080034ec <_init>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr

080034f8 <_fini>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr
